[gcode_macro _SENSORLESS_PARAMS]
variable_homing_current: 1.5
variable_safe_z: 3
# force move for homing after M84 or power off
variable_force_move: True
# move to centre after homing XY
variable_move_centre: True
# stop and start the camera when homing Z
variable_stop_start_camera: False
gcode:

[force_move]
enable_force_move: true


[homing_override]
axes: xyz
set_position_z: 0
gcode:
    {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}
    {% set cartographer = ('cartographer' in printer.configfile.settings) %}
    {% set scanner = ('scanner' in printer.configfile.settings) %}
    {% set btteddy = ('probe_eddy_current btt_eddy' in printer.configfile.settings) %}
    {% set beacon = ('beacon' in printer.configfile.settings) %}
    {% set POSITION_X = printer.configfile.settings['stepper_x'].position_max/2 %}
    {% set POSITION_Y = printer.configfile.settings['stepper_y'].position_max/2 %}
    {% set safe_z = printer["gcode_macro _SENSORLESS_PARAMS"].safe_z|int %}
    {% set force_move = printer["gcode_macro _SENSORLESS_PARAMS"].force_move %}
    {% set move_centre = printer["gcode_macro _SENSORLESS_PARAMS"].move_centre %}

    {% if printer["gcode_macro _SAF_HOMING_START"] != null %}
    _SAF_HOMING_START
    {% endif %}

    G90

    # where motors were turned off or printer power cycled / klipper restarted
    {% if home_all or 'X' in params or 'Y' in params %}
        # so if at least one axis has been homed printer.toolhead.homed_axes = "xyz"
        # so this safe force move step only occurs when no axis are homed
        {% if printer.toolhead.homed_axes != "xyz" and force_move %}
            RESPOND TYPE=command MSG='Force moving Z {safe_z} mm distance'
            SET_KINEMATIC_POSITION Z=0
            G0 Z{safe_z} F600
            M400 # this makes sure we wait for the move to finish
        {% else %}
            G0 Z{safe_z} F600
        {% endif %}
    {% endif %}

    {% if home_all or 'X' in params %}
        _HOME_X
    {% endif %}
    {% if home_all or 'Y' in params %}
        _HOME_Y
    {% endif %}
    {% if home_all or 'Z' in params %}
        _HOME_Z
    {% endif %}

    {% if move_centre and 'Z' not in params and 'X' in params and 'Y' in params %}
        G90
        G0 X{POSITION_X} Y{POSITION_Y} F2800
    {% endif %}

    {% if printer["gcode_macro _SAF_HOMING_END"] != null %}
        _SAF_HOMING_END
    {% endif %}


[gcode_macro _HOME_X]
gcode:
    {% set cartographer = ('cartographer' in printer.configfile.settings) %}
    {% set scanner = ('scanner' in printer.configfile.settings) %}
    {% set btteddy = ('probe_eddy_current btt_eddy' in printer.configfile.settings) %}
    {% set beacon = ('beacon' in printer.configfile.settings) %}
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOMING_CURRENT = printer["gcode_macro _SENSORLESS_PARAMS"].homing_current %}

    # Always use consistent run_current on A/B steppers during sensorless homing
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOMING_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOMING_CURRENT}

    {% if not cartographer and not scanner and not btteddy and not beacon %}
        G1 Z10 F1200
    {% endif %}

    G28 X

    # Move away
    G91
    G1 X-10 F1200
    
    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000

    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro _HOME_Z]
gcode:
    {% set cartographer = ('cartographer' in printer.configfile.settings) %}
    {% set btteddy = ('probe_eddy_current btt_eddy' in printer.configfile.settings) %}
    {% set POSITION_X = printer.configfile.settings['stepper_x'].position_max/2 %}
    {% set POSITION_Y = printer.configfile.settings['stepper_y'].position_max/2 %}
    {% set camera_started = printer["gcode_macro START_CAMERA"].started|default(true) %}
    {% set stop_start_camera = printer["gcode_macro _SENSORLESS_PARAMS"].stop_start_camera %}

    G90
    G0 X{POSITION_X} Y{POSITION_Y} F2800
    {% if (cartographer or stop_start_camera) and camera_started %}
        STOP_CAMERA
    {% endif %}

    {% if btteddy %}
        {% set calibration_temp = printer.configfile.settings["temperature_probe btt_eddy"].calibration_temp %}
        {% set preheat_nozzle_temp = printer["gcode_macro _START_END_PARAMS"].start_preheat_nozzle_temp %}
        {% set target_nozzle_temp = printer[printer.toolhead.extruder].target %}

        # so in order for the btt eddy to hit its target temp
        {% if target_nozzle_temp < preheat_nozzle_temp %}
            RESPOND TYPE=command MSG='Heating extruder to {preheat_nozzle_temp}c'
            M104 S{preheat_nozzle_temp}
        {% endif %}
        RESPOND TYPE=command MSG='Waiting for btt eddy to be at least {calibration_temp}c'
        TEMPERATURE_WAIT SENSOR="temperature_probe btt_eddy" MINIMUM={calibration_temp}
    {% endif %}

    G28 Z

    # now we can cool the extruder down if it was not heating previously
    {% if btteddy and target_nozzle_temp < preheat_nozzle_temp %}
        RESPOND TYPE=command MSG='Restoring extruder to {target_nozzle_temp}c'
        M104 S{target_nozzle_temp}
    {% endif %}

    G90
    {% if (cartographer or stop_start_camera) and camera_started %}
        START_CAMERA
    {% endif %}
    
    G1 Z10 F1200

    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000

[gcode_macro _HOME_Y]
gcode:
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOMING_CURRENT = printer["gcode_macro _SENSORLESS_PARAMS"].homing_current %}

    # Always use consistent run_current on A/B steppers during sensorless homing
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOMING_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOMING_CURRENT}

    G28 Y

    # Move away
    G91
    G1 Y+10 F1200

    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000

    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}
