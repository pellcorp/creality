[gcode_macro _SENSORLESS_PARAMS]
variable_homing_current: 1.5
variable_safe_z: 3
# force move for homing after M84 or power off
variable_force_move: True
# stop and start the camera when homing Z
variable_stop_start_camera: False
variable_homing_move_away_y: 10
variable_homing_move_away_x: 10
gcode:

[force_move]
enable_force_move: true

[homing_override]
axes: xyz
gcode:
    {% set uparams = rawparams | upper %}
    {% set home_x = 'X' in uparams %}
    {% set home_y = 'Y' in uparams %}
    {% set home_z = 'Z' in uparams %}
    {% set home_all = not home_x and not home_y and not home_z %}

    {% if printer["gcode_macro _SAF_HOMING_START"] != null %}
        _SAF_HOMING_START
    {% endif %}

    G90

    {% if home_all or home_x or home_y %}
        _PRE_HOME_XY
    {% endif %}

    {% if home_all or home_x %}
        _PRE_HOME_X
        G28 X
        _POST_HOME_X
    {% endif %}
    {% if home_all or home_y %}
        _PRE_HOME_Y
        G28 Y
        _POST_HOME_Y
    {% endif %}

    {% if home_all or home_x %}
        _PRE_HOME_X
        G28 X
        _POST_HOME_X
    {% endif %}
    {% if home_all or home_y %}
        _PRE_HOME_Y
        G28 Y
        _POST_HOME_Y
    {% endif %}

    {% if home_all or (home_x and home_y) %}
        _POST_HOME_XY
    {% endif %}

    {% if home_all or home_z %}
        _PRE_HOME_Z

        {% set btteddy = ('probe_eddy_current btt_eddy' in printer.configfile.settings) %}
        {% if btteddy %}
            {% set calibration_temp = printer.configfile.settings["temperature_probe btt_eddy"].calibration_temp %}
            {% set preheat_nozzle_temp = printer["gcode_macro _START_END_PARAMS"].start_preheat_nozzle_temp %}
            {% set target_nozzle_temp = printer[printer.toolhead.extruder].target %}

            # so in order for the btt eddy to hit its target temp
            {% if target_nozzle_temp < preheat_nozzle_temp %}
                RESPOND TYPE=command MSG='Heating extruder to {preheat_nozzle_temp}c'
                M104 S{preheat_nozzle_temp}
            {% endif %}
            RESPOND TYPE=command MSG='Waiting for btt eddy to be at least {calibration_temp}c'
            TEMPERATURE_WAIT SENSOR="temperature_probe btt_eddy" MINIMUM={calibration_temp}
        {% endif %}

        G28 Z

        # now we can cool the extruder down if it was not heating previously
        {% if btteddy and target_nozzle_temp < preheat_nozzle_temp %}
            RESPOND TYPE=command MSG='Restoring extruder to {target_nozzle_temp}c'
            M104 S{target_nozzle_temp}
        {% endif %}

        _POST_HOME_Z
    {% endif %}

    {% if printer["gcode_macro _SAF_HOMING_END"] != null %}
        _SAF_HOMING_END
    {% endif %}

[gcode_macro _PRE_HOME_X]
gcode:
  {% set HOMING_CURRENT = printer["gcode_macro _SENSORLESS_PARAMS"].homing_current %}
  SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOMING_CURRENT}
  SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOMING_CURRENT}

[gcode_macro _PRE_HOME_Y]
gcode:
  {% set HOMING_CURRENT = printer["gcode_macro _SENSORLESS_PARAMS"].homing_current %}
  SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOMING_CURRENT}
  SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOMING_CURRENT}

[gcode_macro _PRE_HOME_Z]
gcode:
  {% set camera_started = printer["gcode_macro START_CAMERA"].started|default(true) %}
  {% set stop_start_camera = printer["gcode_macro _SENSORLESS_PARAMS"].stop_start_camera %}

  {% if stop_start_camera and camera_started %}
      STOP_CAMERA
  {% endif %}

[gcode_macro _POST_HOME_X]
gcode:
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set homing_move_away_x = printer["gcode_macro _SENSORLESS_PARAMS"].homing_move_away_x %}

    # Move away
    G91
    G1 X-{homing_move_away_x} F1200

    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000

    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro _POST_HOME_Y]
gcode:
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set homing_move_away_y = printer["gcode_macro _SENSORLESS_PARAMS"].homing_move_away_y %}

    # Move away
    G91
    G1 Y+{homing_move_away_y} F1200

    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000

    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro _POST_HOME_Z]
gcode:
  {% set camera_started = printer["gcode_macro START_CAMERA"].started|default(true) %}
  {% set stop_start_camera = printer["gcode_macro _SENSORLESS_PARAMS"].stop_start_camera %}

  {% if stop_start_camera and camera_started %}
      START_CAMERA
  {% endif %}

  # little z-hop at the end
  G90
  G1 Z10 F1200


[gcode_macro _PRE_HOME_XY]
gcode:
    # where motors were turned off or printer power cycled / klipper restarted
    # so if at least one axis has been homed printer.toolhead.homed_axes = "xyz"
    # so this safe force move step only occurs when no axis are homed
    {% set force_move = printer["gcode_macro _SENSORLESS_PARAMS"].force_move %}
    {% set POSITION_X = printer.configfile.settings['stepper_x'].position_max/2 %}
    {% set POSITION_Y = printer.configfile.settings['stepper_y'].position_max/2 %}
    {% set safe_z = printer["gcode_macro _SENSORLESS_PARAMS"].safe_z|int %}

    {% if printer.toolhead.homed_axes != "xyz" and force_move %}
        RESPOND TYPE=command MSG='Force moving Z {safe_z} mm distance'
        SET_KINEMATIC_POSITION Z=0
        G0 Z{safe_z} F600
        # wait for motor move to finish
        M400

        # if cartotouch fails then homing no longer works until klipper is updated
        # not sure why this happens, need to investigate it before this can be re-enabled
        # our fork of klipper has support for clearing Z only
        # SET_KINEMATIC_POSITION CLEAR=Z
    {% endif %}

[gcode_macro _POST_HOME_XY]
gcode:
    {% if "xy" in printer.toolhead.homed_axes %}
        {% set POSITION_X = printer.configfile.settings['stepper_x'].position_max/2 %}
        {% set POSITION_Y = printer.configfile.settings['stepper_y'].position_max/2 %}
        G90
        G0 X{POSITION_X} Y{POSITION_Y} F3200
    {% endif %}
