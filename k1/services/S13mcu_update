#!/bin/sh

PROG=/usr/bin/mcu_util
VERSION_FILE=/usr/data/mcu.versions
LOG_FILE=/tmp/mcu_update.log
FW_ROOT_DIR=/usr/data/klipper/fw

RET_SUCCESS=0
RET_TIMEOUT=1
RET_ERROR=2

write_log() {
    [ -e $LOG_FILE ] || touch $LOG_FILE
    echo "[$(date "+%Y-%m-%d %H:%M:%S")] $1" >> $LOG_FILE
}

mcu_handshake() {
    local tty_path=$1

    local output=$($PROG -i $tty_path -c)
    local ret=$?
    if [ $ret -ne $RET_SUCCESS ]; then
        write_log "$output"
        write_log "handshake $tty_path fail, ret=$ret"
    else
        write_log "handshake $tty_path success"
    fi

    echo $ret
}

get_version() {
    local tty_path=$1

    local version=$($PROG -i $tty_path -g)
    local ret=$?
    if [ $ret -ne $RET_SUCCESS ]; then
        write_log "$version"
        write_log "get_version $tty_path fail, ret=$ret"
        echo "unknown"
    else
        # not sure why, but if the MCU is not even connected mcu_util returns 0 exit code
        # so we need to have a hack to look for dodgy version string
        if echo "$version" | grep -q "usart_rec_Process"; then
          write_log "$version"
          write_log "get_version $tty_path fail"
          echo "unknown"
        else
          write_log "get_version $version"
          echo "$version"
        fi
    fi
}

compare_version() {
    local version=$1
    local fw_dir=$2

    # version example: mcu0_110_G32-mcu0_000_000
    local hw_version=$(echo $version | awk 'BEGIN{FS="-"} {print $1} END{}')
    local fw_version=$(echo $version | awk 'BEGIN{FS="-"} {print $2} END{}')

    local invalid_fw_version=false
    if [ "${fw_version:4:1}" != "_" ] || [ "${fw_version:8:1}" != "_" ]; then
        write_log "get invalid fw version"
        invalid_fw_version=true
    fi

    cd $fw_dir

    local ret_fw_bin=
    if [ $(ls "$hw_version"*.bin | wc -l) -eq 1 ]; then
        local fw_bin=$(ls "$hw_version"*.bin)
        local tmp=${fw_bin%.*}
        local orig_fw_version=${version:18:3}
        local target_fw_version=${tmp:18:3}
        if [ "$invalid_fw_version" = "true" ] || [ $target_fw_version -ne $orig_fw_version ]; then
            ret_fw_bin=$fw_dir/$fw_bin
            write_log "old version: $version, will update: $ret_fw_bin"
        fi
    else
        write_log "we should keep only one firmware file for $hw_version board!"
    fi

    echo "$ret_fw_bin"
}

startup_app() {
    local tty_path=$1
    
    local output=$($PROG -i $tty_path -s)
    local ret=$?
    if [ $ret -ne $RET_SUCCESS ]; then
        write_log "$output"
        write_log "startup $tty_path fail, ret=$ret"
    else
        write_log "startup app success"
    fi
    return $ret
}

fw_update() {
    local tty_path=$1
    local fw_path=$2

    local output=$($PROG -i $tty_path -u -f $fw_path)
    local ret=$?
    if [ $ret -ne $RET_SUCCESS ]; then
        write_log "$output"
        write_log "fw_update $tty_path fail, $fw_path, ret=$ret"
    else
        write_log "fw_update success"
    fi
    echo $ret
}

auto_update() {
    local model=$(get_sn_mac.sh model)
    local board=$(get_sn_mac.sh board)
    local fw_dir=
    case $board in
        "CR4CU220812S10" | "CR4CU220812S11" | "CR4CU220812S12")
            if [ "$model" = "CR-K1" -o "$model" = "K1C" -o "$model" = "K1 SE" \
                -o "$model" = "CR-K1 Max" -o "$model" = "K1 Max SE" ]; then
                fw_dir=K1
                write_log "The directory selected for this hardware is: $fw_dir"
            else
                write_log "The script is not intended for this printer model ($model)"
                exit 1
            fi
            ;;
        *)
            write_log "The script is not intended for this board ($board)"
            exit 1
    esac

    if [ "x$fw_dir" = "x" ] || [ ! -d $FW_ROOT_DIR/$fw_dir ]; then
        exit 1
    fi

     # For some reason you have to get all the handshakes first and then flash the firmware, otherwise there may be problems.

     # Handshaking
    local mcu_ready=false
    local mcu_serial=/dev/ttyS7
    if [ -e $mcu_serial ]; then
       local ret=$(mcu_handshake $mcu_serial)
        if [ $ret -eq $RET_SUCCESS ]; then
            mcu_ready=true
            write_log "mcu ready"
        fi
    fi

    local bed_ready=false
    local bed_serial=/dev/ttyS9
    if [ -e $bed_serial ]; then
        local ret=$(mcu_handshake $bed_serial)
        if [ $ret -eq $RET_SUCCESS ]; then
            bed_ready=true
            write_log "bed ready"
        fi
    fi

    local noz_ready=false
    local noz_serial=/dev/ttyS1
    if [ -e $noz_serial ]; then
        local ret=$(mcu_handshake $noz_serial)
        if [ $ret -eq $RET_SUCCESS ]; then
            noz_ready=true
            write_log "noz ready"
        fi
    fi

    if [ -f $VERSION_FILE ]; then
      # only clear out the file if at least one mcu can be flashed
      if [ $mcu_ready = "true" ] || [ $noz_ready = "true" ]; then
        rm $VERSION_FILE
      fi
    fi

    # Flashing
    if [ $mcu_ready = "true" ]; then
        local mcu_version=$(get_version $mcu_serial)
        if [ $mcu_version != "unknown" ]; then
            write_log "mcu_version: $mcu_version"
            local fw_bin=$(compare_version $mcu_version $FW_ROOT_DIR/$fw_dir)
            if [ "x$fw_bin" != "x" ]; then
                local ret=$(fw_update $mcu_serial $fw_bin)
                if [ $ret -eq $RET_SUCCESS ]; then
                    tmp=$(basename $fw_bin)
                    mcu_version=${tmp%.bin}
                fi
            else
                startup_app $mcu_serial
            fi
        fi
        echo "mcu_version=$mcu_version" >> $VERSION_FILE
    fi

    if [ $bed_ready = "true" ]; then
        local bed_version=$(get_version $bed_serial)
        if [ $bed_version != "unknown" ]; then
            write_log "bed_version: $bed_version"
            local fw_bin=$(compare_version $bed_version $FW_ROOT_DIR/$fw_dir)
            if [ "x$fw_bin" != "x" ]; then
                local ret=$(fw_update $bed_serial $fw_bin)
                if [ $ret -eq $RET_SUCCESS ]; then
                    tmp=$(basename $fw_bin)
                    bed_version=${tmp%.bin}
                fi
            else
                startup_app $bed_serial
            fi
        fi
        echo "bed_version=$bed_version" >> $VERSION_FILE
    fi

    if [ $noz_ready = "true" ]; then
        local noz_version=$(get_version $noz_serial)
        if [ $noz_version != "unknown" ]; then
            write_log "noz_version: $noz_version"
            local fw_bin=$(compare_version $noz_version $FW_ROOT_DIR/$fw_dir)
            if [ "x$fw_bin" != "x" ]; then
                local ret=$(fw_update $noz_serial $fw_bin)
                if [ $ret -eq $RET_SUCCESS ]; then
                    tmp=$(basename $fw_bin)
                    noz_version=${tmp%.bin}
                fi
            else
                startup_app $noz_serial
            fi
        fi
        echo "noz_version=$noz_version" >> $VERSION_FILE
    fi
}

[ -x $PROG ] || {
    echo "not found $PROG!"
    exit 1
}

case "$1" in
    start)
        auto_update
        ;;
    *)
        echo "Usage: $0 {start}"
        exit 1
esac

exit $?
