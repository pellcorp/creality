[gcode_shell_command belts_input_shaper]
command: /usr/data/pellcorp/k1/guppy/calibrate_shaper.py
timeout: 600.0
verbose: True

# this gcode shell command is used by guppyscreen
[gcode_shell_command graph_belts]
command: /usr/data/pellcorp/k1/guppy/graph_belts.py
timeout: 600.0
verbose: True

[gcode_macro BELTS_SHAPER_CALIBRATION]
description: Perform a custom half-axis test to analyze and compare the frequency profiles of individual belts on CoreXY printers
gcode:
  {% set min_freq = params.FREQ_START|default(5)|float %}
  {% set max_freq = params.FREQ_END|default(133.33)|float %}
  {% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}
  {% set png_out_path = params.PNG_OUT_PATH|default("/usr/data/printer_data/config/belts_calibration.png") %}
  {% set png_width = params.PNG_WIDTH|default(8)|float %}
  {% set png_height = params.PNG_HEIGHT|default(4.8)|float %}

  TEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=B FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}
  M400

  TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=A FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}
  M400

  RESPOND MSG="Belts comparative frequency profile generation..."
  RESPOND MSG="This may take some time (3-5min)"
  RUN_SHELL_COMMAND CMD=graph_belts PARAMS="-w {png_width} -l {png_height} -n -o {png_out_path} -k /usr/data/klipper /usr/data/tmp/raw_data_axis=1.000,-1.000_A.csv /usr/data/tmp/raw_data_axis=1.000,1.000_B.csv"

################################################
###### STANDARD INPUT_SHAPER CALIBRATIONS ######
################################################
# Written by Frix_x#0161 #
# https://github.com/Frix-x/klippain-shaketune

[gcode_macro EXCITATE_AXIS_AT_FREQUENCY]
description: Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration
gcode:
  {% set frequency = params.FREQUENCY|default(25)|int %}
  {% set time = params.TIME|default(10)|int %}
  {% set axis = params.AXIS|default("x")|string|lower %}

  {% if axis not in ["x", "y", "a", "b"] %}
      { action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }
  {% endif %}

  {% if axis == "a" %}
      {% set axis = "1,-1" %}
  {% elif axis == "b" %}
      {% set axis = "1,1" %}
  {% endif %}

  TEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}
  M400


[gcode_macro _GUPPYSCREEN_EXTRUDE]
variable_beep: True
gcode:
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|int %}
  {% set EXTRUDE_LEN = params.EXTRUDE_LEN|int %}
  {% set SPEED = params.SPEED|default(extrude_len)|int %}
  M109 S{EXTRUDER_TEMP}
  M83
  G1 E{EXTRUDE_LEN} F{SPEED}
  M400
  {% if beep %}
    BEEP
  {% endif %}


[gcode_macro _GUPPYSCREEN_RETRACT]
variable_beep: True
gcode:
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|int %}
  {% set EXTRUDE_LEN = params.EXTRUDE_LEN|int %}
  {% set SPEED = params.SPEED|default(extrude_len)|int %}
  M109 S{EXTRUDER_TEMP}
  M83
  G1 E-{EXTRUDE_LEN} F{SPEED}
  M400
  {% if beep %}
    BEEP
  {% endif %}


# this macro is used by guppyscreen as well
[gcode_macro LOAD_MATERIAL]
variable_beep: True
variable_extruder_temp: 240
variable_extrude_len: 35
gcode:
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(extruder_temp)|int %}
  {% set EXTRUDE_LEN = params.EXTRUDE_LEN|default(extrude_len)|int %}
  SAVE_GCODE_STATE NAME=myMoveState
  M109 S{EXTRUDER_TEMP}
  G91
  G1 E{EXTRUDE_LEN} F180
  M400
  RESTORE_GCODE_STATE NAME=myMoveState
  {% if beep %}
    BEEP
  {% endif %}


# this macro is used by guppyscreen as well
[gcode_macro UNLOAD_MATERIAL]
variable_beep: True
variable_extruder_temp: 240
gcode:
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(extruder_temp)|int %}
  SAVE_GCODE_STATE NAME=myMoveState
  M109 S{EXTRUDER_TEMP}
  G91
  G1 E20 F180
  G1 E-30 F180
  G1 E-50 F2000
  M400
  RESTORE_GCODE_STATE NAME=myMoveState
  {% if beep %}
    BEEP
  {% endif %}
