[gcode_macro CARTOGRAPHER_TOUCH]
rename_existing: _CARTOGRAPHER_TOUCH
gcode:
    {% set camera_started = printer["gcode_macro START_CAMERA"].started|default(true) %}
    {% if camera_started %}
    STOP_CAMERA
    {% endif %}
    G4 P1000
    _CARTOGRAPHER_TOUCH {rawparams}
    G4 P1000
    {% if camera_started %}
    START_CAMERA
    {% endif %}


[gcode_macro CARTOGRAPHER_THRESHOLD_SCAN]
rename_existing: _CARTOGRAPHER_THRESHOLD_SCAN
gcode:
    {% set camera_started = printer["gcode_macro START_CAMERA"].started|default(true) %}
    {% if camera_started %}
    STOP_CAMERA
    {% endif %}
    G4 P1000
    _CARTOGRAPHER_THRESHOLD_SCAN {rawparams}
    G4 P1000
    {% if camera_started %}
    START_CAMERA
    {% endif %}


[gcode_macro SCREWS_TILT_CALCULATE]
rename_existing: _SCREWS_TILT_CALCULATE
gcode:
    {% set camera_started = printer["gcode_macro START_CAMERA"].started|default(true) %}
    {% if camera_started %}
    STOP_CAMERA
    {% endif %}
    G4 P1000
    _SCREWS_TILT_CALCULATE {rawparams}
    G4 P1000
    {% if camera_started %}
    START_CAMERA
    {% endif %}


[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
gcode:
    {% set ADAPTIVE = params.ADAPTIVE|default(None) %}
    {% set max_velocity = printer.toolhead.max_velocity %}
    {% set max_accel = printer.toolhead.max_accel %}
    {% set max_accel_to_decel = printer.toolhead.max_accel_to_decel %}
    {% set cal_max_velocity = 400 if max_velocity > 400 else max_velocity %}
    {% set cal_max_accel = 15000 if max_accel > 15000 else max_accel %}
    {% set cal_max_accel_to_decel = 10000 if max_accel_to_decel > 10000 else max_accel_to_decel %}
    G4 P1000
    {% set camera_started = printer["gcode_macro START_CAMERA"].started|default(true) %}
    {% if camera_started %}
    STOP_CAMERA
    {% endif %}
    BED_MESH_CLEAR                                                                  # clear current mesh
    G4 P500                                                                         # wait required to prevent MCU overload / inconsistant meshing
    {% if not ADAPTIVE %}
    RESPOND TYPE=command MSG='Setting VELOCITY={cal_max_velocity} (was {max_velocity}) ACCEL={cal_max_accel} (was {max_accel}), ACCEL_TO_DECEL={cal_max_accel_to_decel} (was {max_accel_to_decel})'
    SET_VELOCITY_LIMIT VELOCITY={cal_max_velocity} ACCEL={cal_max_accel} ACCEL_TO_DECEL={cal_max_accel_to_decel}  # drop accels to prevent hyper agressive meshing
    {% endif %}
    _BED_MESH_CALIBRATE {rawparams}                                                 # start bedmesh calibrate
    G4 P500                                                                         # wait required to prevent MCU overload / inconsistant mesh calculation
    {% if not ADAPTIVE %}
    RESPOND TYPE=command MSG='Restoring VELOCITY={max_velocity} ACCEL={max_accel}, ACCEL_TO_DECEL={max_accel_to_decel}'
    SET_VELOCITY_LIMIT VELOCITY={max_velocity} ACCEL={max_accel} ACCEL_TO_DECEL={max_accel_to_decel}
    {% endif %}
    {% if camera_started %}
    START_CAMERA
    {% endif %}
    G4 P1000


[gcode_macro AXIS_TWIST_COMPENSATION_CALIBRATE]
rename_existing: _AXIS_TWIST_COMPENSATION_CALIBRATE
gcode:
    {% set camera_started = printer["gcode_macro START_CAMERA"].started|default(true) %}
    {% if camera_started %}
    STOP_CAMERA
    {% endif %}
    G4 P1000
    _AXIS_TWIST_COMPENSATION_CALIBRATE {rawparams}
    G4 P1000
    {% if camera_started %}
    RESPOND TYPE=command MSG='You need to run START_CAMERA on completion'
    {% endif %}
