# the macro's here are used to instead of the default cartographer console commands. 
# this is due to the camera using too much usb bus bandwidth. when calibrating with the camera enabled on the stock board theres a very high chance of the mcu crashing or timing out.
# credits to ShimaYT, Destinal, BootyEngineer and Zarboz <3
[gcode_macro CARTO_ESTIMATE_BACKLASH]
description: calibrate cartographer backlash without crashing
gcode:
    {% set camera_started = printer["gcode_macro START_CAMERA"].started|default(true) %}
    {% if camera_started %}
        STOP_CAMERA
    {% endif %}
    G28                                                                        # home axis required
    {% set POSITION_X = printer.configfile.settings['stepper_x'].position_max/2 %}
    {% set POSITION_Y = printer.configfile.settings['stepper_y'].position_max/2 %}
    G1 X{POSITION_X} Y{POSITION_Y} F6000                                       # moves print head to center of bed
    G4 P1000
    CARTOGRAPHER_ESTIMATE_BACKLASH                                             # do z backlash command
    G4 P1000
    {% if camera_started %}
        START_CAMERA
    {% endif %}


[gcode_macro CARTO_PROBE_ACCURACY]
description: test zprobe accuracy without crashing
gcode:
    {% set camera_started = printer["gcode_macro START_CAMERA"].started|default(true) %}
    {% if camera_started %}
        STOP_CAMERA
    {% endif %}
    G28                                                                         # home axis required
    {% set POSITION_X = printer.configfile.settings['stepper_x'].position_max/2 %}
    {% set POSITION_Y = printer.configfile.settings['stepper_y'].position_max/2 %}
    G1 X{POSITION_X} Y{POSITION_Y} F6000                                       # moves print head to center of bed
    G4 P1000
    PROBE_ACCURACY                                                             # test probe accuracy
    G4 P1000
    {% if camera_started %}
        START_CAMERA
    {% endif %}


[gcode_macro CARTO_CALIBRATE]
description: calibrate initial Z offset without crashing mcu
gcode:
    {% set camera_started = printer["gcode_macro START_CAMERA"].started|default(true) %}
    {% if camera_started %}
        STOP_CAMERA
    {% endif %}
    G28 X Y                                                                    # home the X Y 
    G90                                                                        # sets position to absolute
    {% set POSITION_X = printer.configfile.settings['stepper_x'].position_max/2 %}
    {% set POSITION_Y = printer.configfile.settings['stepper_y'].position_max/2 %}
    G1 X{POSITION_X} Y{POSITION_Y} F6000                                       # moves print head to center of bed
    RESPOND TYPE=command MSG='Waiting for bed temperature to hit 60c'
    M190 S60
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=60                              # wait for bed temperature before next step
    RESPOND TYPE=command MSG='Ready to calibrate!'
    G4 P1000
    CARTOGRAPHER_CALIBRATE {rawparams}                                                    # calibrate Initial Z command. 
    G4 P1000
    {% if camera_started %}
        RESPOND TYPE=command MSG='You need to run START_CAMERA on completion'
    {% endif %}


[gcode_macro SCREWS_TILT_CALCULATE]
rename_existing: _SCREWS_TILT_CALCULATE
gcode:
    {% set camera_started = printer["gcode_macro START_CAMERA"].started|default(true) %}
    {% if camera_started %}
        STOP_CAMERA
    {% endif %}
    G4 P1000
    _SCREWS_TILT_CALCULATE {rawparams}
    G4 P1000
    {% if camera_started %}
        START_CAMERA
    {% endif %}


[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
gcode:
    G4 P1000
    {% set camera_started = printer["gcode_macro START_CAMERA"].started|default(true) %}
    {% if camera_started %}
        STOP_CAMERA
    {% endif %}
    BED_MESH_CLEAR                                                                  # clear current mesh
    G4 P500                                                                         # wait required to prevent MCU overload / inconsistant meshing
    _BED_MESH_CALIBRATE {rawparams}                                                 # start bedmesh calibrate
    G4 P500                                                                         # wait required to prevent MCU overload / inconsistant mesh calculation
    {% if camera_started %}
       START_CAMERA
    {% endif %}
    G4 P1000


[gcode_macro AXIS_TWIST_COMPENSATION_CALIBRATE]
rename_existing: _AXIS_TWIST_COMPENSATION_CALIBRATE
gcode:
    {% set camera_started = printer["gcode_macro START_CAMERA"].started|default(true) %}
    {% if camera_started %}
        STOP_CAMERA
    {% endif %}
    G4 P1000
    _AXIS_TWIST_COMPENSATION_CALIBRATE {rawparams}
    G4 P1000
    {% if camera_started %}
        RESPOND TYPE=command MSG='You need to run START_CAMERA on completion'
    {% endif %}
