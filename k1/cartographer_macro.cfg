# the macro's here are used to instead of the default cartographer console commands. 
# this is due to the camera using too much usb bus bandwidth. when calibrating with the camera enabled on the stock board theres a very high chance of the mcu crashing or timing out.
# credits to ShimaYT, Destinal, BootyEngineer and Zarboz <3
[gcode_macro CARTOGRAPHER_ESTIMATE_BACKLASH]
rename_existing: _CARTOGRAPHER_ESTIMATE_BACKLASH
description: calibrate cartographer backlash without crashing
gcode:
     G28                                                                        # home axis required
     STOP_CAMERA
     {% set POSITION_X = printer.configfile.settings['stepper_x'].position_max/2 %}
     {% set POSITION_Y = printer.configfile.settings['stepper_y'].position_max/2 %}
     G1 X{POSITION_X} Y{POSITION_Y} F6000                                       # moves print head to center of bed
     _CARTOGRAPHER_ESTIMATE_BACKLASH                                             # do z backlash command
     START_CAMERA


[gcode_macro PROBE_ACCURACY]
rename_existing: _PROBE_ACCURACY
description: test zprobe accuracy without crashing
gcode:
     G28                                                                         # home axis required
     STOP_CAMERA
     {% set POSITION_X = printer.configfile.settings['stepper_x'].position_max/2 %}
     {% set POSITION_Y = printer.configfile.settings['stepper_y'].position_max/2 %}
     G1 X{POSITION_X} Y{POSITION_Y} F6000                                       # moves print head to center of bed
     _PROBE_ACCURACY                                                             # test probe accuracy
     START_CAMERA


[gcode_macro CARTOGRAPHER_CALIBRATE]
rename_existing: _CARTOGRAPHER_CALIBRATE
description: calibrate initial Z offset without crashing mcu
gcode:
     G28 X Y                                                                    # home the X Y 
     STOP_CAMERA
     G90                                                                        # sets position to absolute
     {% set POSITION_X = printer.configfile.settings['stepper_x'].position_max/2 %}
     {% set POSITION_Y = printer.configfile.settings['stepper_y'].position_max/2 %}
     G1 X{POSITION_X} Y{POSITION_Y} F6000                                       # moves print head to center of bed
     {action_respond_info("Waiting for bed temperature to hit 60c")}            # notify user to wait before continuing
     M190 S60                                                                   # wait for bed temperature before next step
     {action_respond_info("Ready to calibrate!")}                               # notify user ready to calibrate!
     {action_respond_info("You need to run START_CAMERA on completion")}            # remind user to manually re-start the camera
     _CARTOGRAPHER_CALIBRATE                                                     # calibrate Initial Z command. 


[gcode_macro CARTO_BED_MESH]
description: carto bed mesh without crashing mcu
gcode:
    STOP_CAMERA
    G4 P1000                                                                        # wait required to allow the camera services to close
    BED_MESH_CLEAR                                                                  # clear current mesh
    G4 P500                                                                         # wait required to prevent MCU overload / inconsistant meshing
    SET_VELOCITY_LIMIT ACCEL=15000 ACCEL_TO_DECEL=10000 SQUARE_CORNER_VELOCITY=25   # drop accels to prevent hyper agressive meshing
    BED_MESH_CALIBRATE                                                              # start bedmesh calibrate
    G4 P500                                                                         # wait required to prevent MCU overload / inconsistant mesh calculation
    SET_VELOCITY_LIMIT ACCEL=20000 ACCEL_TO_DECEL=10000 SQUARE_CORNER_VELOCITY=5    # raise accels back to stock machine standard speeds.
    START_CAMERA


[gcode_macro SCREWS_TILT_CALCULATE]
rename_existing: _SCREWS_TILT_CALCULATE
gcode:
    STOP_CAMERA
    _SCREWS_TILT_CALCULATE
    START_CAMERA


[gcode_macro AXIS_TWIST_COMPENSATION_CALIBRATE]
rename_existing: _AXIS_TWIST_COMPENSATION_CALIBRATE
gcode:
    STOP_CAMERA
    {action_respond_info("You need to run START_CAMERA on completion")}            # remind user to manually re-start the camera
    _AXIS_TWIST_COMPENSATION_CALIBRATE
