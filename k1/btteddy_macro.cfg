[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
variable_scan_type: 'rapid_scan'
gcode:
    {% set max_velocity = printer.configfile.settings['printer'].max_velocity %}
    {% set max_accel = printer.configfile.settings['printer'].max_accel %}
    {% set cal_max_velocity = 400 if max_velocity > 400 else max_velocity %}
    {% set cal_max_accel = 10000 if max_accel > 10000 else max_accel %}

    BED_MESH_CLEAR 
    RESPOND TYPE=command MSG='Setting VELOCITY={cal_max_velocity} (was {max_velocity}) ACCEL={cal_max_accel} (was {max_accel})'
    SET_VELOCITY_LIMIT VELOCITY={cal_max_velocity} ACCEL={cal_max_accel}  # drop accels to prevent hyper agressive meshing

    # https://www.klipper3d.org/Bed_Mesh.html#rapid-continuous-scanning
    # a rapid scan causes rippling
    _BED_MESH_CALIBRATE METHOD={scan_type} {rawparams}

    RESPOND TYPE=command MSG='Restoring VELOCITY={max_velocity} ACCEL={max_accel}'
    SET_VELOCITY_LIMIT VELOCITY={max_velocity} ACCEL={max_accel}


[gcode_macro BTT_EDDY_CALIBRATE_DRIVE_CURRENT]
gcode:
    LDC_CALIBRATE_DRIVE_CURRENT CHIP=btt_eddy


[gcode_macro BTT_EDDY_CURRENT_CALIBRATE]
gcode:
    PROBE_EDDY_CURRENT_CALIBRATE CHIP=btt_eddy

# Save Z Offset from Guilouz - Creality-Helper-Script
# From - https://github.com/Guilouz/Creality-Helper-Script/blob/main/files/macros/save-zoffset.cfg


[save_variables]
filename: /usr/data/printer_data/config/variables.cfg


# this is dodgy af honestly but it seems like the btt eddy z_offset stuff is not working
# correctly, hopefully this can be rectified and this abomination removed
[gcode_macro SET_GCODE_OFFSET]
description: Saving Z-Offset
rename_existing: _SET_GCODE_OFFSET
gcode:
  {% if printer.save_variables.variables.zoffset %}
    {% set zoffset = printer.save_variables.variables.zoffset %}
  {% else %}
    {% set zoffset = {'z': None} %}
  {% endif %}
  {% set ns = namespace(zoffset={'z': zoffset.z}) %}
  _SET_GCODE_OFFSET {% for p in params %}{'%s=%s '% (p, params[p])}{% endfor %}
  {%if 'Z' in params %}
    {% set null = ns.zoffset.update({'z': params.Z}) %}
  {% endif %}
  {%if 'Z_ADJUST' in params %}
    {%if ns.zoffset.z == None %}
      {% set null = ns.zoffset.update({'z': 0}) %}
    {% endif %}
    {% set null = ns.zoffset.update({'z': (ns.zoffset.z | float) + (params.Z_ADJUST | float)}) %}
  {% endif %}
  SAVE_VARIABLE VARIABLE=zoffset VALUE="{ns.zoffset}"


[delayed_gcode LOAD_GCODE_OFFSETS]
initial_duration: 2
gcode:
  {% if printer.save_variables.variables.zoffset %}
    {% set zoffset = printer.save_variables.variables.zoffset %}
    _SET_GCODE_OFFSET {% for axis, offset in zoffset.items() if zoffset[axis] %}{ "%s=%s " % (axis, offset) }{% endfor %}
    RESPOND TYPE=command MSG="Loaded Z-Offset from variables.cfg: {zoffset.z}mm"
  {% endif %}
 