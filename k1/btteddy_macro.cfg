[gcode_macro _BTTEDDY_MACRO_PARAMS]
# max temp at which we should be calibrating the eddy or in the case
# of temp calibration the max temp at which we start calibrating
variable_calibration_max_temp: 40
# target eddy temp for temp calibration
variable_calibration_target_temp: 90
# in order to heat up the eddy for temp calibration the target bed temp
variable_calibration_bed_temp: 100
# in order to heat up the eddy for temp calibration the target nozzle temp
variable_calibration_nozzle_temp: 220
gcode:

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
variable_scan_type: 'rapid_scan'
gcode:
    {% set max_velocity = printer.toolhead.max_velocity %}
    {% set max_accel = printer.toolhead.max_accel %}
    {% set max_square_corner_velocity = printer.toolhead.square_corner_velocity %}
    {% set start_max_velocity = [printer["gcode_macro _START_END_PARAMS"].start_max_velocity, max_velocity]|min %}
    {% set start_max_accel = [printer["gcode_macro _START_END_PARAMS"].start_max_accel, max_accel]|min %}
    {% set start_max_square_corner_velocity = [printer["gcode_macro _START_END_PARAMS"].start_max_square_corner_velocity, max_square_corner_velocity]|min %}

    {% if printer["gcode_macro _SAF_BED_MESH_START"] != null %}
    _SAF_BED_MESH_START
    {% endif %}

    {% set calibration_temp = printer.configfile.settings["temperature_probe btt_eddy"].calibration_temp %}
    {% set preheat_nozzle_temp = printer["gcode_macro _START_END_PARAMS"].start_preheat_nozzle_temp %}
    {% set target_nozzle_temp = printer[printer.toolhead.extruder].target %}

    {% set eddy_temp = printer['temperature_probe btt_eddy'].temperature %}
    {% if eddy_temp < calibration_temp %}
      {% if target_nozzle_temp < preheat_nozzle_temp %}
          RESPOND TYPE=command MSG='Heating extruder to {preheat_nozzle_temp}c'
          M104 S{preheat_nozzle_temp}
      {% endif %}
      RESPOND TYPE=command MSG='Waiting for btt eddy to be at least {calibration_temp}c'
      TEMPERATURE_WAIT SENSOR="temperature_probe btt_eddy" MINIMUM={calibration_temp}
    {% endif %}

    {% if max_velocity > start_max_velocity or max_accel > start_max_accel or max_square_corner_velocity > start_max_square_corner_velocity %}
        RESPOND TYPE=command MSG='Setting VELOCITY={start_max_velocity} (was {max_velocity}) ACCEL={start_max_accel} (was {max_accel}) SQUARE_CORNER_VELOCITY={start_max_square_corner_velocity} (was {max_square_corner_velocity})'
        SET_VELOCITY_LIMIT VELOCITY={start_max_velocity} ACCEL={start_max_accel} SQUARE_CORNER_VELOCITY={start_max_square_corner_velocity}
    {% endif %}

    _BED_MESH_CALIBRATE METHOD={scan_type} {rawparams}

    {% if max_velocity > start_max_velocity or max_accel > start_max_accel or max_square_corner_velocity > start_max_square_corner_velocity %}
        RESPOND TYPE=command MSG='Restoring VELOCITY={max_velocity} ACCEL={max_accel} SQUARE_CORNER_VELOCITY={max_square_corner_velocity}'
        SET_VELOCITY_LIMIT VELOCITY={max_velocity} ACCEL={max_accel} SQUARE_CORNER_VELOCITY={max_square_corner_velocity}
    {% endif %}

    {% if target_nozzle_temp < preheat_nozzle_temp %}
        RESPOND TYPE=command MSG='Restoring extruder to {target_nozzle_temp}c'
        M104 S{target_nozzle_temp}
    {% endif %}

    {% if printer["gcode_macro _SAF_BED_MESH_END"] != null %}
    _SAF_BED_MESH_END
    {% endif %}


# used for calibration
[gcode_macro _SET_KIN_MAX_Z]
gcode:
    {% if "xy" not in printer.toolhead.homed_axes %}
      G28 X Y
    {% endif %}

    {% set max_z = printer.toolhead.axis_maximum.z - 35 %}
    RESPOND TYPE=command MSG='Setting fake Z Height of {max_z}'
    SET_KINEMATIC_POSITION Z={max_z}


[gcode_macro BTTEDDY_CALIBRATE_DRIVE_CURRENT]
gcode:
    {% set calibration_max_temp = printer["gcode_macro _BTTEDDY_MACRO_PARAMS"].calibration_max_temp %}
    {% set position_max_x = printer.configfile.settings['stepper_x'].position_max %}
    {% set position_max_y = printer.configfile.settings['stepper_y'].position_max %}

    M104 S0
    M140 S0

    {% if "xy" not in printer.toolhead.homed_axes %}
        G28 X Y
    {% endif %}

    {% set eddy_temp = printer['temperature_probe btt_eddy'].temperature %}
    {% if eddy_temp > calibration_max_temp %}
      G90
      G0 X{position_max_x - 25} Y{position_max_y / 2} F2800
      TURN_ON_FANS
      RESPOND TYPE=command MSG='Waiting for btt eddy to be less than {calibration_max_temp}c'
      TEMPERATURE_WAIT SENSOR="temperature_probe btt_eddy" MAXIMUM={calibration_max_temp}

      TURN_OFF_FANS
      G0 X{position_max_x / 2} Y{position_max_y / 2} F2800
    {% endif %}

    LDC_CALIBRATE_DRIVE_CURRENT CHIP=btt_eddy


[gcode_macro BTTEDDY_CURRENT_CALIBRATE]
variable_stop_start_camera: True
gcode:
    {% set calibration_max_temp = printer["gcode_macro _BTTEDDY_MACRO_PARAMS"].calibration_max_temp %}
    {% set position_max_x = printer.configfile.settings['stepper_x'].position_max %}
    {% set position_max_y = printer.configfile.settings['stepper_y'].position_max %}

    M104 S0
    M140 S0

    {% if "xy" not in printer.toolhead.homed_axes %}
        G28 X Y
    {% endif %}

    {% set max_z = printer.toolhead.axis_maximum.z - 5 %}
    RESPOND TYPE=command MSG='Setting fake Z Height of {max_z}'
    SET_KINEMATIC_POSITION Z={max_z}

    {% set eddy_temp = printer['temperature_probe btt_eddy'].temperature %}
    {% if eddy_temp > calibration_max_temp %}
      G90
      G0 X{position_max_x - 25} Y{position_max_y / 2} F2800
      TURN_ON_FANS

      RESPOND TYPE=command MSG='Waiting for btt eddy to be less than {calibration_max_temp}c'
      TEMPERATURE_WAIT SENSOR="temperature_probe btt_eddy" MAXIMUM={calibration_max_temp}

      TURN_OFF_FANS
      G0 X{position_max_x / 2} Y{position_max_y / 2} F2800
    {% endif %}

    {% if stop_start_camera %}
        STOP_CAMERA
    {% endif %}
    PROBE_EDDY_CURRENT_CALIBRATE CHIP=btt_eddy

    {% if stop_start_camera %}
        RESPOND TYPE=command MSG='You need to run START_CAMERA on completion'
    {% endif %}


[gcode_macro BTTEDDY_TEMPERATURE_PROBE_CALIBRATE]
variable_stop_start_camera: True
gcode:
    {% set calibration_target_temp = printer["gcode_macro _BTTEDDY_MACRO_PARAMS"].calibration_target_temp %}
    {% set calibration_bed_temp = printer["gcode_macro _BTTEDDY_MACRO_PARAMS"].calibration_bed_temp %}
    {% set calibration_nozzle_temp = printer["gcode_macro _BTTEDDY_MACRO_PARAMS"].calibration_nozzle_temp %}
    # for temp probe calibration the previous calibration temp is sufficient
    {% set calibration_temp = printer.configfile.settings["temperature_probe btt_eddy"].calibration_temp %}
    {% set position_max_x = printer.configfile.settings['stepper_x'].position_max %}
    {% set position_max_y = printer.configfile.settings['stepper_y'].position_max %}

    M104 S0
    M140 S0

    {% if "xy" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

    {% set eddy_temp = printer['temperature_probe btt_eddy'].temperature %}
    {% if eddy_temp > calibration_temp %}
      G90
      G0 X{position_max_x - 25} Y{position_max_y / 2} F2800
      TURN_ON_FANS

      # we want the widest array of temps so make sure the btt eddy is cold to begin with
      RESPOND TYPE=command MSG='Waiting for btt eddy to be less than {calibration_temp}c'
      TEMPERATURE_WAIT SENSOR="temperature_probe btt_eddy" MAXIMUM={calibration_temp}

      TURN_OFF_FANS
      G0 X{position_max_x / 2} Y{position_max_y / 2} F2800
    {% endif %}

    {% if stop_start_camera %}
        STOP_CAMERA
    {% endif %}

    # want the toolhead to be raise so that it re-reraises it during sampling
    G0 Z10 F600

    TEMPERATURE_PROBE_CALIBRATE PROBE=btt_eddy TARGET={calibration_target_temp} STEP=4

    # make sure the chamber fan does not turn on
    {% if 'temperature_fan chamber_fan' in printer.configfile.settings %}
      SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=chamber_fan TARGET=70
    {% endif %}
    M104 S{calibration_nozzle_temp}
    M140 S{calibration_bed_temp}

    {% if stop_start_camera %}
        RESPOND TYPE=command MSG='You need to run START_CAMERA on completion'
    {% endif %}


[save_variables]
filename: /usr/data/printer_data/config/variables.cfg

# Save Z Offset from Guilouz - Creality-Helper-Script
# From - https://github.com/Guilouz/Creality-Helper-Script/blob/main/files/macros/save-zoffset.cfg

# this is dodgy af honestly but it seems like the btt eddy z_offset stuff is not working
# correctly, hopefully this can be rectified and this abomination removed
[gcode_macro SET_GCODE_OFFSET]
description: Saving Z-Offset
rename_existing: _SET_GCODE_OFFSET
gcode:
  {% if printer.save_variables.variables.zoffset %}
    {% set zoffset = printer.save_variables.variables.zoffset %}
  {% else %}
    {% set zoffset = {'z': None} %}
  {% endif %}
  {% set ns = namespace(zoffset={'z': zoffset.z}) %}
  _SET_GCODE_OFFSET {% for p in params %}{'%s=%s '% (p, params[p])}{% endfor %}
  {%if 'Z' in params %}
    {% set null = ns.zoffset.update({'z': params.Z}) %}
  {% endif %}
  {%if 'Z_ADJUST' in params %}
    {%if ns.zoffset.z == None %}
      {% set null = ns.zoffset.update({'z': 0}) %}
    {% endif %}
    {% set null = ns.zoffset.update({'z': (ns.zoffset.z | float) + (params.Z_ADJUST | float)}) %}
  {% endif %}
  SAVE_VARIABLE VARIABLE=zoffset VALUE="{ns.zoffset}"


[delayed_gcode LOAD_GCODE_OFFSETS]
initial_duration: 2
gcode:
  {% if printer.save_variables.variables.zoffset %}
    {% set zoffset = printer.save_variables.variables.zoffset %}
    _SET_GCODE_OFFSET {% for axis, offset in zoffset.items() if zoffset[axis] %}{ "%s=%s " % (axis, offset) }{% endfor %}
    RESPOND TYPE=command MSG="Loaded Z-Offset from variables.cfg: {zoffset.z}mm"
  {% endif %}
 

# ignore the use of the baby stepping Save button
[gcode_macro Z_OFFSET_APPLY_PROBE]
rename_existing: _Z_OFFSET_APPLY_PROBE
gcode:
