[gcode_macro _START_END_PARAMS]
# this value is multiplied by the target temp to give wait time in seconds
variable_bed_warp_wait_multiplier: 8.0
# how far below target temp can the bed be to do fractional wait times
variable_bed_warp_fraction_wait: 0.75
# how long to wait each loop before displaying a status message
variable_bed_warp_wait_interval: 15
# if you want START_PRINT to enable filament sensor and END_PRINT to disable
variable_enable_disable_filament_sensor: True
# max velocity for start print and bed mesh calibrate
variable_start_max_velocity: 400
# max accel for start print and bed mesh calibrate
variable_start_max_accel: 10000
# where not using cartotouch what to heat nozzle to just before oozing
variable_start_preheat_nozzle_temp: 150
# whether to do cooldown routine in END_PRINT
variable_end_print_cool_down: True
variable_end_print_cool_down_nozzle_temp: 70.0
# if target bed temp is above this the cool down is skipped
variable_end_print_cool_down_max_bed_temp: 70.0
# if bed warp stabilisation is enabled should we keep the bed heated
variable_end_print_keep_bed_heated: True
gcode:

[gcode_macro _CLIENT_VARIABLE]
# Do not change these
variable_park_at_cancel: True
variable_use_custom_pos: True
# the value in mm to lift the nozzle when move to park position
variable_custom_park_dz: 25.0
# park position during CANCEL_PRINT and END_PRINT
variable_park_at_cancel_x: 0.0
# park position during CANCEL_PRINT and END_PRINT
variable_park_at_cancel_y: 0.0
# the value to retract during CANCEL_PRINT or END_PRINT
variable_cancel_retract: 7.0
# park position during PAUSE / M600 / FILAMENT RUNOUT
variable_custom_park_x: 0.0
# park position during PAUSE / M600 / FILAMENT RUNOUT
variable_custom_park_y: 0.0
# the value to retract during PAUSE / M600 / FILAMENT RUNOUT
variable_retract: 1.0
# retract speed in mm/s
variable_speed_retract: 35.0
# the value to unretract while RESUME
variable_unretract: 1.0
# unretract speed in mm/s
variable_speed_unretract: 35.0
# z move speed in mm/s
variable_speed_hop: 15.0
# move speed in mm/s
variable_speed_move: 100.0
# do not change this, this handles cancel print
variable_user_cancel_macro: "_ON_CANCEL"
# do not change this, this handles resume custom hook
variable_user_resume_macro: "_ON_RESUME"
gcode:

[virtual_pins]

[output_pin Bed_Warp_Stabilisation]
pin: virtual_pin:BED_WARP_STABILISE_pin
value: 1

[firmware_retraction]
retract_length: 0.6
retract_speed: 30
unretract_extra_length: 0.2
unretract_speed: 30

[idle_timeout]
timeout: 3600
gcode:
    {% if printer.pause_resume.is_paused %}
        RESPOND TYPE=command MSG='Printer is paused, timeout bypassed'
    {% else %}
        RESPOND TYPE=command MSG='Timeout Reached - Turning off heaters and motors'

        TURN_OFF_HEATERS
        M84
    {% endif %}


[gcode_macro _ON_RESUME]
gcode:
    {% if printer["gcode_macro _SAF_ON_RESUME"] != null %}
        _SAF_ON_RESUME
    {% endif %}


[gcode_macro _ON_CANCEL]
gcode:
    # if there is an outstanding end print going on, we need to cancel it
    UPDATE_DELAYED_GCODE ID=wait_for_end_print_cooldown DURATION=0

    {% if printer["gcode_macro _SAF_ON_CANCEL"] != null %}
        _SAF_ON_CANCEL
    {% endif %}

    TURN_OFF_HEATERS
    TURN_OFF_FANS
    M84


[gcode_macro _ON_FILAMENT_RUNOUT]
gcode:
    {% if printer["gcode_macro _SAF_ON_FILAMENT_RUNOUT"] != null %}
        _SAF_ON_FILAMENT_RUNOUT
    {% else %}
        RESPOND TYPE=command MSG='Filament Runout detected.'
    {% endif %}


[gcode_macro START_PRINT]
gcode:
    {% set BED_TEMP=params.BED_TEMP|default(65)|float %}
    {% set EXTRUDER_TEMP=params.EXTRUDER_TEMP|default(230)|float %}
    {% set CARTOGRAPHER_MODEL=params.CARTOGRAPHER_MODEL|default(None) %}
    {% set BED_MESH_PROFILE=params.BED_MESH_PROFILE|default(None) %}
    {% set camera_started = printer["gcode_macro START_CAMERA"].started|default(true) %}
    {% set beacon = ('beacon' in printer.configfile.settings) %}
    {% set eddyng = ('probe_eddy_ng btt_eddy' in printer.configfile.settings) %}
    {% set klicky = (printer["gcode_macro _KLICKY_VARIABLES"] != null) %}
    {% set cartotouch = ('scanner' in printer.configfile.settings and 'touch' == printer.configfile.settings['scanner'].mode|default('touch')) %}
    {% set bed_warp_stabilisation = printer['output_pin Bed_Warp_Stabilisation'].value == 1 %}
    {% set current_bed_temp = printer.heater_bed.temperature %}
    {% set enable_disable_filament_sensor = printer["gcode_macro _START_END_PARAMS"].enable_disable_filament_sensor %}
    {% set max_velocity = printer.toolhead.max_velocity %}
    {% set max_accel = printer.toolhead.max_accel %}
    {% set start_max_velocity = [printer["gcode_macro _START_END_PARAMS"].start_max_velocity, max_velocity]|min %}
    {% set start_max_accel = [printer["gcode_macro _START_END_PARAMS"].start_max_accel, max_accel]|min %}
    {% if cartotouch %}
        {% set preheat_nozzle_temp = printer.configfile.settings['scanner'].scanner_touch_max_temp %}
    {% else %}
        {% set preheat_nozzle_temp = printer["gcode_macro _START_END_PARAMS"].start_preheat_nozzle_temp %}
    {% endif %}

    # if there is an outstanding end print going on, we need to cancel it
    UPDATE_DELAYED_GCODE ID=wait_for_end_print_cooldown DURATION=0

    {% if printer["gcode_macro _SAF_START_PRINT_START"] != null %}
        _SAF_START_PRINT_START
    {% endif %}

    {% if CARTOGRAPHER_MODEL %}
        CARTOGRAPHER_MODEL_SELECT name="{CARTOGRAPHER_MODEL}"
    {% endif %}

    {% if enable_disable_filament_sensor %}
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
    {% endif %}

    M104 S{preheat_nozzle_temp}  # start heating nozzle but only to just before oozing

    M140 S{BED_TEMP}  # start heating bed dont wait

    {% if max_velocity > start_max_velocity or max_accel > start_max_accel %}
    RESPOND TYPE=command MSG='Setting VELOCITY={start_max_velocity} (was {max_velocity}) ACCEL={start_max_accel} (was {max_accel})'
    SET_VELOCITY_LIMIT VELOCITY={start_max_velocity} ACCEL={start_max_accel}
    {% endif %}

    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

    {% if printer["gcode_macro _SAF_START_PRINT_AFTER_G28"] != null %}
        _SAF_START_PRINT_AFTER_G28
    {% endif %}

    M190 S{BED_TEMP}  # wait for bed temperature before next step

    {% if bed_warp_stabilisation %}
       {% if current_bed_temp < (BED_TEMP * 0.99) %}
            _WARP_STABILISE TARGET_TEMP={BED_TEMP} CURRENT_TEMP={current_bed_temp}
        {% else %}
            RESPOND TYPE=command MSG='Skipping bed warp stabilisation as bed already at {current_bed_temp}c'
        {% endif %}
    {% else %}
        RESPOND TYPE=command MSG='Skipping bed warp stabilisation - it is disabled'
    {% endif %}

    {% if printer["gcode_macro _SAF_START_PRINT_BEFORE_BED_MESH"] != null %}
        _SAF_START_PRINT_BEFORE_BED_MESH
    {% endif %}

    BED_MESH_CLEAR  # clear current mesh
    G4 P500  # wait required to prevent MCU overload / inconsistent meshing

    {% if beacon or cartotouch or eddyng %}
        M109 S{preheat_nozzle_temp}
    {% endif %}

    {% if beacon %}
        # touch samples and retries are configured in beacon.cfg
        G28 Z METHOD=CONTACT CALIBRATE=0
    {% elif eddyng %}
        # touch samples and retries are configured in eddyng.cfg
        PROBE_EDDY_NG_TAP HOME_Z=1
    {% endif %}

    {% if BED_MESH_PROFILE %}
        BED_MESH_PROFILE LOAD="{BED_MESH_PROFILE}"
    {% else %}
        BED_MESH_CALIBRATE ADAPTIVE=1 ADAPTIVE_MARGIN=5
    {% endif %}

    # the carto team strongly recommends tap after bed mesh
    {% if cartotouch %}
        # touch samples and retries are configured in cartotouch.cfg
        CARTOGRAPHER_TOUCH

        # I think this macro alters accel settings so set them back
        SET_VELOCITY_LIMIT VELOCITY={start_max_velocity} ACCEL={start_max_accel}
    {% endif %}

    SMART_PARK  # park the printhead near the print area

    M109 S{EXTRUDER_TEMP}  # wait for nozzle temperature before next step
    LINE_PURGE

    {% if max_velocity > start_max_velocity or max_accel > start_max_accel %}
    RESPOND TYPE=command MSG='Restoring VELOCITY={max_velocity} ACCEL={max_accel}'
    SET_VELOCITY_LIMIT VELOCITY={max_velocity} ACCEL={max_accel}
    {% endif %}

    {% if printer["gcode_macro _SAF_START_PRINT_END"] != null %}
        _SAF_START_PRINT_END
    {% endif %}


# This is mostly copied from _TOOLHEAD_PARK_PAUSE_CANCEL so that the speeds and
# behaviour are consistent for CANCEL_PRINT and END_PRINT
[gcode_macro _TOOLHEAD_PARK_END_PRINT]
gcode:
    {% set cooldown = params.COOLDOWN | default(None) %}
    {% set skip_z_park = params.SKIP_Z_PARK | default(None) %}

    {% if "xyz" in printer.toolhead.homed_axes %}
        {% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
        {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
        {% set sp_move = client.speed_move | default(velocity) * 60 %}
        {% set park_at_cancel_x = client.park_at_cancel_x %}

        G90
        {% if not skip_z_park %}
            {% set sp_hop = client.speed_hop | default(15) * 60 %}
            {% set park_dz = client.custom_park_dz | default(2.0) | abs %}
            {% set origin = printer.gcode_move.homing_origin %}
            {% set act = printer.gcode_move.gcode_position %}
            {% set max = printer.toolhead.axis_maximum %}
            {% set z_park = [[(act.z + park_dz), 0]|max, (max.z - origin.z)] | min %}

            G1 Z{z_park} F{sp_hop}
        {% endif %}
        {% if cooldown %}
            {% set park_at_cancel_y = printer.configfile.settings['stepper_y'].position_max / 2 %}
        {% else %}
            {% set park_at_cancel_y = client.park_at_cancel_y %}
        {% endif %}
        G0 X{park_at_cancel_x} Y{park_at_cancel_y} F{sp_move}
        # set back to relative coordinates
        {% if not printer.gcode_move.absolute_coordinates %}
            G91
        {% endif %}
    {% else %}
        RESPOND TYPE=echo MSG='Printer not homed'
    {% endif %}


[gcode_macro END_PRINT]
gcode:
    {% set park_at_cancel_x = printer['gcode_macro _CLIENT_VARIABLE'].park_at_cancel_x %}
    {% set park_at_cancel_y = printer['gcode_macro _CLIENT_VARIABLE'].park_at_cancel_y %}
    {% set bed_warp_stabilisation = printer['output_pin Bed_Warp_Stabilisation'].value == 1 %}
    {% set enable_disable_filament_sensor = printer["gcode_macro _START_END_PARAMS"].enable_disable_filament_sensor %}
    {% set end_print_cool_down = printer["gcode_macro _START_END_PARAMS"].end_print_cool_down %}
    {% set end_print_cool_down_nozzle_temp = printer["gcode_macro _START_END_PARAMS"].end_print_cool_down_nozzle_temp|float %}
    {% set end_print_cool_down_max_bed_temp = printer["gcode_macro _START_END_PARAMS"].end_print_cool_down_max_bed_temp|float %}
    {% set end_print_keep_bed_heated = printer["gcode_macro _START_END_PARAMS"].end_print_keep_bed_heated %}
    {% set eddyng = ('probe_eddy_ng btt_eddy' in printer.configfile.settings) %}

    BED_MESH_CLEAR
    {% if eddyng %}
      PROBE_EDDY_NG_SET_TAP_OFFSET VALUE=0
    {% endif %}

    {% set current_bed_temp = printer.heater_bed.temperature %}

    {% if printer["gcode_macro _SAF_END_PRINT_START"] != null %}
        _SAF_END_PRINT_START
    {% endif %}

    {% if enable_disable_filament_sensor %}
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
    {% endif %}

    {% set cancel_retract = printer['gcode_macro _CLIENT_VARIABLE'].cancel_retract %}
    _CLIENT_RETRACT LENGTH={cancel_retract}

    # park in front of aux fan if cooldown
    {% if end_print_cool_down and current_bed_temp < end_print_cool_down_max_bed_temp %}
        _TOOLHEAD_PARK_END_PRINT COOLDOWN=1
    {% else %}
        _TOOLHEAD_PARK_END_PRINT
    {% endif %}

    {% if bed_warp_stabilisation and end_print_keep_bed_heated %}
        RESPOND TYPE=command MSG='Heatbed waiting for next print'
        M104 S0  # Turning off the nozzle
    {% else %}
        TURN_OFF_HEATERS
    {% endif %}

    # clear pause_next_layer and pause_at_layer as preparation for next print
    SET_PAUSE_NEXT_LAYER ENABLE=0
    SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0

    {% if end_print_cool_down and current_bed_temp < end_print_cool_down_max_bed_temp %}
        RESPOND TYPE=command MSG='Waiting for nozzle temp to be below {end_print_cool_down_nozzle_temp}c'
        {% if 'fan_generic chamber' in printer.configfile.settings %}
          SET_FAN_SPEED FAN=chamber SPEED=0.6
        {% endif %}
        {% if 'fan_generic auxiliary' in printer.configfile.settings %}
          SET_FAN_SPEED FAN=auxiliary SPEED=0.5
        {% endif %}
        SET_FAN_SPEED FAN=part SPEED=0.7

        UPDATE_DELAYED_GCODE ID=wait_for_end_print_cooldown DURATION=1
    {% else %}
        M84  # motors off
        TURN_OFF_FANS

        {% if printer["gcode_macro _SAF_END_PRINT_END"] != null %}
            _SAF_END_PRINT_END
        {% endif %}
    {% endif %}


[delayed_gcode wait_for_end_print_cooldown]
gcode:
  {% set end_print_cool_down_nozzle_temp = printer["gcode_macro _START_END_PARAMS"].end_print_cool_down_nozzle_temp|float %}
  {% if printer.extruder.temperature <= end_print_cool_down_nozzle_temp %}
      _WAIT_TEMP_COOL_DOWN_END
  {% else %}
      UPDATE_DELAYED_GCODE ID=wait_for_end_print_cooldown DURATION=5
  {% endif %}


# this is defined separately to exit the delayed gcode directly
[gcode_macro _WAIT_TEMP_COOL_DOWN_END]
gcode:
  UPDATE_DELAYED_GCODE ID=wait_for_end_print_cooldown DURATION=0

  # we already lowered the bed earlier so want to skip it now
  _TOOLHEAD_PARK_END_PRINT SKIP_Z_PARK=1

  M84  # motors off
  TURN_OFF_FANS

  {% if printer["gcode_macro _SAF_END_PRINT_END"] != null %}
      _SAF_END_PRINT_END
  {% endif %}


# Thanks to Zero for this macro
[gcode_macro _WARP_STABILISE]
description: "Performs bed warp stabilisation based on the current bed temperature. Adjusts stabilisation time according to the bed temperature."
gcode:
    {% set multiplier = printer["gcode_macro _START_END_PARAMS"].bed_warp_wait_multiplier|float %}
    {% set interval = printer["gcode_macro _START_END_PARAMS"].bed_warp_wait_interval|int %}
    {% set partial = printer["gcode_macro _START_END_PARAMS"].bed_warp_fraction_wait|float %}

    {% set current_temp = params.CURRENT_TEMP|float %}
    {% set target_temp = params.TARGET_TEMP|float %}

    # if current temp is already pretty high, we only need to do a fraction of heat soaking
    {% if current_temp > (target_temp * partial) %}
        {% set total_time = ((target_temp - current_temp) * multiplier)|int %}
    {% else %}
        # 100c will be 13minutes approx heat time, 65c will be 8.5 minutes preheat, etc.
        {% set total_time = (target_temp * multiplier)|int %}
    {% endif %}

    RESPOND TYPE=command MSG='Bed Warp Stabilisation starting with a total time of {total_time} seconds...'
    
    {% set loops = (total_time / interval)|int %}   
    {% for i in range(loops) %}
        {% set time_remaining = total_time - (i + 1) * interval %}
        RESPOND TYPE=command MSG='Bed Warp Stabilization { time_remaining } seconds remaining'
        {% if time_remaining < interval %}
            G4 P{ time_remaining * 1000 }  # Wait for the interval time in milliseconds
        {% else %}
            G4 P{ interval * 1000 }  # Wait for the interval time in milliseconds
        {% endif %}
    {% endfor %}

    RESPOND TYPE=command MSG='Warp Stabilisation complete!'
