[gcode_macro _START_END_PARAMS]
# this value is multiplied by the target temp to give wait time in seconds
variable_bed_warp_wait_multiplier: 8.0
# how long to wait each loop before displaying a status message
variable_bed_warp_wait_interval: 15
gcode:

[gcode_macro _CLIENT_VARIABLE]
variable_park_at_cancel   : True  ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_custom_park_dz   : 3.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_use_custom_pos   : False ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 0.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 0.0   ; custom y position; value must be within your defined min and max of Y
variable_retract          : 1.0   ; the value to retract while PAUSE
variable_cancel_retract   : 5.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 35.0  ; retract speed in mm/s
variable_unretract        : 1.0   ; the value to unretract while RESUME
variable_speed_unretract  : 35.0  ; unretract speed in mm/s
variable_speed_hop        : 15.0  ; z move speed in mm/s
variable_speed_move       : 100.0 ; move speed in mm/s
gcode:

[virtual_pins]

[output_pin Bed_Warp_Stabilisation]
pin: virtual_pin:BED_WARP_STABILISE_pin
value: 0

[idle_timeout]
timeout: 3600
gcode:
    {% if printer.pause_resume.is_paused %}
        RESPOND TYPE=command MSG='Printer is paused, timeout bypassed'
    {% else %}
        RESPOND TYPE=command MSG='Timeout Reached - Turning off heaters and motors'
        TURN_OFF_HEATERS
        M84
    {% endif %}

[gcode_macro START_PRINT]
gcode:
    {% set BED_TEMP=params.BED_TEMP|default(65)|float %}
    {% set EXTRUDER_TEMP=params.EXTRUDER_TEMP|default(230)|float %}
    {% set camera_started = printer["gcode_macro START_CAMERA"].started|default(true) %}
    {% set cartographer = ('cartographer' in printer.configfile.settings or ('scanner' in printer.configfile.settings and 'scan' == printer.configfile.settings['scanner'].calibration_method|default('touch'))) %}
    {% set scanner = ('scanner' in printer.configfile.settings and 'touch' == printer.configfile.settings['scanner'].calibration_method|default('touch')) %}
    {% set max_velocity = printer.toolhead.max_velocity %}
    {% set max_accel = printer.toolhead.max_accel %}
    {% set cal_max_velocity = 400 if max_velocity > 400 else max_velocity %}
    {% set cal_max_accel = 15000 if max_accel > 15000 else max_accel %}
    {% set bed_warp_stabilisation = printer['output_pin Bed_Warp_Stabilisation'].value == 1 %}
    {% set current_bed_temp = printer.heater_bed.temperature %}

    M140 S{BED_TEMP}                                                                # start heating bed dont wait

    {% if (cartographer or scanner) and camera_started %}
    STOP_CAMERA
    {% endif %}

    G28                                                                             # home all axis
    RESPOND TYPE=command MSG='Setting VELOCITY={cal_max_velocity} (was {max_velocity}) ACCEL={cal_max_accel} (was {max_accel})'
    SET_VELOCITY_LIMIT VELOCITY={cal_max_velocity} ACCEL={cal_max_accel}  # drop accels to prevent hyper agressive meshing
    
    RESPOND TYPE=command MSG='Waiting for bed temp to reach {BED_TEMP}c'
    M190 S{BED_TEMP}                                                                # wait for bed temperature before next step

    {% if bed_warp_stabilisation %}
        {% if current_bed_temp < BED_TEMP * 0.90 %}
        _WARP_STABILISE BED_TEMP={BED_TEMP}
        {% else %}
        RESPOND TYPE=command MSG='Skipping warp stabilization.'
        {% endif %}
    {% endif %}

    BED_MESH_CLEAR                                                                  # clear current mesh
    G4 P500                                                                         # wait required to prevent MCU overload / inconsistant meshing

    BED_MESH_CALIBRATE ADAPTIVE=1 ADAPTIVE_MARGIN=5

    {% if scanner %}
    RESPOND TYPE=command MSG='Waiting for nozzle temp to reach 150c'
    # nozzle at 150 so that any filament gets wiped off during cartographer touch
    M109 S150
    CARTOGRAPHER_TOUCH RETRIES=20 SAMPLES=3
    {% endif %}

    # in case one of the probe stuffs with the velocity limits reimpose them for smart park
    SET_VELOCITY_LIMIT VELOCITY={cal_max_velocity} ACCEL={cal_max_accel}

    SMART_PARK                                                                      # park the printhead near the print area

    # restore to original speeds
    RESPOND TYPE=command MSG='Restoring VELOCITY={max_velocity} ACCEL={max_accel}'
    SET_VELOCITY_LIMIT VELOCITY={max_velocity} ACCEL={max_accel}

    {% if (cartographer or scanner) and camera_started %}
    START_CAMERA
    {% endif %}

    RESPOND TYPE=command MSG='Waiting for nozzle temp to reach {EXTRUDER_TEMP}c'
    M109 S{EXTRUDER_TEMP}                                                           # wait for nozzle temperature before next step
    LINE_PURGE


[gcode_macro END_PRINT]
gcode:
    {% set bed_warp_stabilisation = printer['output_pin Bed_Warp_Stabilisation'].value == 1 %}

    _CLIENT_RETRACT
    {% if bed_warp_stabilisation %}
    RESPOND TYPE=command MSG='Heatbed waiting for next print'
    M104 S0 # Turning off the nozzle
    {% else %}
    TURN_OFF_HEATERS
    {% endif %}

    TURN_OFF_FANS

    # clear pause_next_layer and pause_at_layer as preparation for next print
    SET_PAUSE_NEXT_LAYER ENABLE=0
    SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
    _TOOLHEAD_PARK_PAUSE_CANCEL

    M84 # motors off


# Thanks to Zero for this macro
[gcode_macro _WARP_STABILISE]
description: "Performs bed warp stabilisation based on the current bed temperature. Adjusts stabilisation time according to the bed temperature."
gcode:
    {% set multiplier = printer["gcode_macro _START_END_PARAMS"].bed_warp_wait_multiplier|float %}
    {% set interval = printer["gcode_macro _START_END_PARAMS"].bed_warp_wait_interval|int %}

    # Retrieve the target bed temperature from parameters or default to 0
    {% set bed_temp = params.BED_TEMP|float %}

    # 100c will be 13minutes approx heat time, 65c will be 8.5 minutes preheat, etc.
    {% set total_time = (bed_temp * multiplier)|int %}

    RESPOND TYPE=command MSG='Bed Warp Stabilisation starting with a total time of {total_time} seconds...'
    
    {% set loops = (total_time / interval)|int %}   
    {% for i in range(loops) %}
      {% set time_remaining = total_time - (i + 1) * interval %}
      RESPOND TYPE=command MSG='Bed Warp Stabilization { time_remaining } seconds remaining'
      {% if time_remaining < interval %}
      G4 P{ time_remaining * 1000 }  # Wait for the interval time in milliseconds
      {% else %}
      G4 P{ interval * 1000 }  # Wait for the interval time in milliseconds
      {% endif %}
    {% endfor %}

    RESPOND TYPE=command MSG='Warp Stabilisation complete!'
