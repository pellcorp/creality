[duplicate_pin_override]
pins: PC0, PC5

[fan_generic part]
pin: !nozzle_mcu: PB8
enable_pin: nozzle_mcu:PB6
# tachometer_pin: ^nozzle_mcu:PB3
# tachometer_poll_interval: 0.0008
cycle_time: 0.0100
hardware_pwm: false

[fan_generic chamber]
pin: PC0
cycle_time: 0.0100
hardware_pwm: false

[fan_generic auxiliary]
pin: PB1
# fixes throttling aux fan below 80% thanks to ClutchKick512
cycle_time: 0.002
hardware_pwm: false

[heater_fan hotend]
pin: nozzle_mcu:PB5
tachometer_pin: ^nozzle_mcu:PB4
heater: extruder
heater_temp: 40

# this makes sure that the MCU fan is always on
[static_digital_output mcu_fan_always_on]
pins:PB2

# you can change the fan from always on to just on when the extruder, bed or steppers
# are on, but this will mean the MCU fan might be off when you are doing other activities
# that are very CPU intensive, like generating graphs
#[controller_fan mcu]
#pin: PB2
#tachometer_pin: ^PC6
#heater: extruder, heater_bed
#stepper: stepper_x, stepper_y, stepper_z
#idle_timeout: 90

[temperature_sensor mcu_temp]
sensor_type: temperature_mcu
min_temp: 0
max_temp: 100

[temperature_sensor nozzle_mcu_temp]
sensor_type: temperature_mcu
sensor_mcu: nozzle_mcu
min_temp: 0
max_temp: 100

# TODO - this is for when the bed mcu is used
#[temperature_sensor leveling_mcu_temp]
#sensor_type: temperature_mcu
#sensor_mcu: leveling_mcu
#min_temp: 0
#max_temp: 100

[temperature_sensor chamber_temp]
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC5
min_temp: 0
max_temp: 125

# this is used to turn the chamber fan on at a certain temp
# it is separate from the chamber fan above we control via M106
[temperature_fan chamber_fan]
pin: PC0
cycle_time: 0.0100
hardware_pwm: false
max_power: 1
shutdown_speed: 0
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC5
min_temp: 0
max_temp: 70
control: watermark
max_delta: 2
target_temp: 35.0
max_speed: 1.0
min_speed: 0.0


[gcode_macro M106]
description: Set Fan Speed. P0 for part, P1 for chamber, P2 for auxiliary, P3 chamber
gcode:
  {% set fan_map = {0: "part", 1: "chamber", 2: "auxiliary", 3: "chamber"} %}
  {% set fan_id = params.P|default(0)|int %}
  {% set fan = fan_map[fan_id] %}
  {% set speed_param = params.S|default(255)|int %}
  {% if speed_param > 0 %}
    {% set speed = (speed_param|float / 255) %}
  {% else %}
    {% set speed = 0 %}
  {% endif %}
  SET_FAN_SPEED FAN={fan} SPEED={speed}


[gcode_macro M107]
description: Set Fan Off. P0 for part, P1 for chamber, P2 for auxiliary, P3 chamber
gcode:
  {% set fan_map = {0: "part", 1: "chamber", 2: "auxiliary", 3: "chamber"} %}
  {% set fan_id = params.P|default(0)|int %}
  {% set fan = fan_map[fan_id] %}
  SET_FAN_SPEED FAN={fan} SPEED=0


# https://github.com/Guilouz/Creality-Helper-Script/blob/main/files/macros/fans-control.cfg
[gcode_macro M141]
description: Set Chamber Temperature with slicers
gcode:
  {% if 'S' in params|upper %}
    {% if params.S|int > 0 %}
      SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=chamber_fan TARGET={params.S|default(35)}
    {% else %}
      SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=chamber_fan TARGET=35
    {% endif %}
  {% endif %}


[gcode_macro M191]
description: Wait for Chamber Temperature to heat up
gcode:
  {% set s = params.S|float %}
  {% set chamber_temp = printer["temperature_sensor chamber_temp"].temperature|float %}
  {% if s > 0 %}
    M141 S{s}
  {% endif %}
  {% if s > chamber_temp and s <= 90 %}
    M140 S100
    RESPOND TYPE=command MSG="Waiting for the bed to heat up the chamber..."
    TEMPERATURE_WAIT SENSOR="temperature_fan chamber_temp" MINIMUM={s-1}
    RESPOND TYPE=command MSG="Chamber target temperature reached: {s}Â°C"
    M140 S{s}
  {% endif %}


[gcode_macro TURN_OFF_FANS]
description: Stop chamber, auxiliary and part fan
gcode:
    SET_FAN_SPEED FAN=part SPEED=0
    SET_FAN_SPEED FAN=chamber SPEED=0
    SET_FAN_SPEED FAN=auxiliary SPEED=0
