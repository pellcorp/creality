[gcode_macro _SENSORLESS_PARAMS]
variable_homing_current: 1.5
variable_safe_z: 3
# force move for homing after M84 or power off
variable_force_move: True
# stop and start the camera when homing Z
variable_stop_start_camera: False
# these are only relevant for sensorless homing
variable_homing_move_away_y: 10
variable_homing_move_away_x: 10
# this configures the z-hop done after z homing and applies regardless of sensorless or not
variable_homing_move_away_z: 10
# some people don't like double homing ignored if not using sensorless
variable_repeat_home_xy: False
# some printers need to home y before x
variable_home_y_before_x: False
# if we should wait for eddy to be at calibration temp before homing
variable_btteddy_wait_for_temp: True
gcode:

[force_move]
enable_force_move: true


# disable force move macro because it should not be used only SET_KINEMATIC_POSITION
[gcode_macro FORCE_MOVE]
rename_existing: _FORCE_MOVE_BAD
variable_disable_force_move: True
gcode:
  {% if disable_force_move %}
    RESPOND TYPE=command MSG="Use SET_KINEMATIC_POSITION instead of FORCE_MOVE"
  {% else %}
    _FORCE_MOVE_BAD {rawparams}
  {% endif %}


[homing_override]
axes: xyz
gcode:
    {% set uparams = rawparams | upper %}
    {% set home_x = 'X' in uparams %}
    {% set home_y = 'Y' in uparams %}
    {% set home_z = 'Z' in uparams %}
    {% set home_all = (home_x and home_y and home_z) or (not home_x and not home_y and not home_z) %}
    {% set klicky = (printer["gcode_macro _KLICKY_VARIABLES"] != null) %}

    {% set sensorless_homing = ('virtual_endstop' in printer.configfile.settings['stepper_x'].endstop_pin and 'virtual_endstop' in printer.configfile.settings['stepper_y'].endstop_pin) %}
    {% set repeat_home_xy = printer["gcode_macro _SENSORLESS_PARAMS"].repeat_home_xy %}
    {% set home_count = 2 if sensorless_homing and repeat_home_xy else 1 %}
    {% set home_y_before_x = printer["gcode_macro _SENSORLESS_PARAMS"].home_y_before_x %}
    {% set home_axes_order = ['y', 'x'] if home_y_before_x else ['x', 'y'] %}
    {% set btteddy_wait_for_temp = printer["gcode_macro _SENSORLESS_PARAMS"].btteddy_wait_for_temp %}

    {% if printer["gcode_macro _SAF_HOMING_START"] != null %}
        _SAF_HOMING_START
    {% endif %}

    G90

    {% if home_all or home_x or home_y %}
        _PRE_HOME_XY HOME_ALL={1 if home_all else 0}
    {% endif %}

    {% for repeat in range(0,home_count) %}
      {% for axes in home_axes_order %}
        {% if axes == 'x' and (home_all or home_x) %}
            _PRE_HOME_X
            G28 X
            _POST_HOME_X
        {% elif axes == 'y' and (home_all or home_y) %}
            _PRE_HOME_Y
            G28 Y
            _POST_HOME_Y
        {% endif %}
      {% endfor %}
    {% endfor %}

    # do not want post home centering for klicky as we need to attach probe first
    {% if (not kicky or not home_z) and (home_all or (home_x and home_y)) %}
        _POST_HOME_XY
    {% endif %}

    {% if home_all or home_z %}
        _PRE_HOME_Z

        {% set btteddy = ('probe_eddy_current btt_eddy' in printer.configfile.settings) %}
        {% if btteddy %}
            {% set calibration_temp = printer.configfile.settings["temperature_probe btt_eddy"].calibration_temp %}
            {% set preheat_nozzle_temp = printer["gcode_macro _START_END_PARAMS"].start_preheat_nozzle_temp %}
            {% set target_nozzle_temp = printer[printer.toolhead.extruder].target %}

            {% set eddy_temp = printer['temperature_probe btt_eddy'].temperature %}
            {% if eddy_temp < calibration_temp %}
              # so in order for the btt eddy to hit its target temp
              {% if target_nozzle_temp < preheat_nozzle_temp %}
                  RESPOND TYPE=command MSG='Heating extruder to {preheat_nozzle_temp}c'
                  M104 S{preheat_nozzle_temp}
              {% endif %}
              {% if btteddy_wait_for_temp %}
                RESPOND TYPE=command MSG='Waiting for btt eddy to be at least {calibration_temp}c'
                TEMPERATURE_WAIT SENSOR="temperature_probe btt_eddy" MINIMUM={calibration_temp}
              {% else %}
                RESPOND TYPE=command MSG='Skipped waiting for btt eddy to be at least {calibration_temp}c'
              {% endif %}
            {% endif %}
        {% endif %}

        G28 Z

        # now we can cool the extruder down if it was not heating previously
        {% if btteddy and eddy_temp < calibration_temp and target_nozzle_temp < preheat_nozzle_temp %}
           {% if btteddy_wait_for_temp %}
              RESPOND TYPE=command MSG='Restoring extruder to {target_nozzle_temp}c'
              M104 S{target_nozzle_temp}
           {% endif %}
        {% endif %}

        _POST_HOME_Z
    {% endif %}

    {% if printer["gcode_macro _SAF_HOMING_END"] != null %}
        _SAF_HOMING_END
    {% endif %}


[gcode_macro _PRE_HOME_X]
gcode:
  {% set sensorless_homing = ('virtual_endstop' in printer.configfile.settings['stepper_x'].endstop_pin) %}
  {% if sensorless_homing %}
    {% set HOMING_CURRENT = printer["gcode_macro _SENSORLESS_PARAMS"].homing_current %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOMING_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOMING_CURRENT}
  {% endif %}


[gcode_macro _PRE_HOME_Y]
gcode:
  {% set sensorless_homing = ('virtual_endstop' in printer.configfile.settings['stepper_y'].endstop_pin) %}
  {% if sensorless_homing %}
    {% set HOMING_CURRENT = printer["gcode_macro _SENSORLESS_PARAMS"].homing_current %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOMING_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOMING_CURRENT}
  {% endif %}


[gcode_macro _PRE_HOME_Z]
gcode:
  {% set camera_started = printer["gcode_macro START_CAMERA"].started|default(true) %}
  {% set stop_start_camera = printer["gcode_macro _SENSORLESS_PARAMS"].stop_start_camera %}
  {% set klicky = (printer["gcode_macro _KLICKY_VARIABLES"] != null) %}

  {% if stop_start_camera and camera_started %}
    G4 P1000
    STOP_CAMERA
    G4 P1000
  {% endif %}

  {% if klicky %}
    ATTACH_PROBE MANUAL=0
  {% elif printer['output_pin _saf_z_endstop'] != null %}
    SET_PIN PIN=_saf_z_endstop VALUE=1
  {% endif %}

[gcode_macro _POST_HOME_X]
gcode:
    {% set sensorless_homing = ('virtual_endstop' in printer.configfile.settings['stepper_x'].endstop_pin) %}
    {% if sensorless_homing %}
      {% set homing_move_away_x = printer["gcode_macro _SENSORLESS_PARAMS"].homing_move_away_x %}
      {% set x_position_endstop = printer.configfile.settings['stepper_x'].position_endstop %}
      {% set x_position_min = printer.configfile.settings['stepper_x'].position_min %}
      G91
      {% if x_position_endstop > x_position_min %}
        G1 X-{homing_move_away_x } F1200
      {% else %}
        G1 X+{homing_move_away_x } F1200
      {% endif %}

      {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
      {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}

      # Wait just a second… (give StallGuard registers time to clear)
      G4 P1000
      SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
      SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}
    {% endif %}


[gcode_macro _POST_HOME_Y]
gcode:
    {% set sensorless_homing = ('virtual_endstop' in printer.configfile.settings['stepper_y'].endstop_pin) %}
    {% if sensorless_homing %}
      {% set homing_move_away_y = printer["gcode_macro _SENSORLESS_PARAMS"].homing_move_away_y %}
      {% set y_position_endstop = printer.configfile.settings['stepper_y'].position_endstop %}
      {% set y_position_min = printer.configfile.settings['stepper_y'].position_min %}
      G91
      {% if y_position_endstop > y_position_min %}
        G1 Y-{homing_move_away_y } F1200
      {% else %}
        G1 Y+{homing_move_away_y} F1200
      {% endif %}

      {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
      {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}

      # Wait just a second… (give StallGuard registers time to clear)
      G4 P1000
      SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
      SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}
    {% endif %}


[gcode_macro _POST_HOME_Z]
gcode:
  {% set camera_started = printer["gcode_macro START_CAMERA"].started|default(true) %}
  {% set stop_start_camera = printer["gcode_macro _SENSORLESS_PARAMS"].stop_start_camera %}
  {% set klicky = (printer["gcode_macro _KLICKY_VARIABLES"] != null) %}
  {% set homing_move_away_z = printer["gcode_macro _SENSORLESS_PARAMS"].homing_move_away_z|int %}

  {% if stop_start_camera and camera_started %}
    G4 P1000
    START_CAMERA
    G4 P1000
  {% endif %}

  # little z-hop at the end
  G90
  G1 Z{homing_move_away_z} F1200

  {% if klicky %}
    DOCK_PROBE MANUAL=0
  {% elif printer['output_pin _saf_z_endstop'] != null %}
    SET_PIN PIN=_saf_z_endstop VALUE=0
  {% endif %}


[gcode_macro _PRE_HOME_XY]
gcode:
    # where motors were turned off or printer power cycled / klipper restarted
    # so if at least one axis has been homed printer.toolhead.homed_axes = "xyz"
    # so this safe force move step only occurs when no axis are homed
    {% set force_move = printer["gcode_macro _SENSORLESS_PARAMS"].force_move %}
    {% set safe_z = printer["gcode_macro _SENSORLESS_PARAMS"].safe_z|int %}

    {% if printer.toolhead.homed_axes != "xyz" and force_move %}
        RESPOND TYPE=command MSG='Force moving Z {safe_z} mm distance'
        SET_KINEMATIC_POSITION Z=0
        G0 Z{safe_z} F600
        # wait for motor move to finish
        M400
        {% set home_all = (params.HOME_ALL|default(0)|int == 1) %}
        {% if not home_all %}
          SET_KINEMATIC_POSITION CLEAR=Z
        {% endif %}
    {% endif %}


[gcode_macro _POST_HOME_XY]
gcode:
    {% if "xy" in printer.toolhead.homed_axes %}
        {% set POSITION_X = printer.configfile.settings['stepper_x'].position_max/2 %}
        {% set POSITION_Y = printer.configfile.settings['stepper_y'].position_max/2 %}
        G90
        G0 X{POSITION_X} Y{POSITION_Y} F3200
    {% endif %}
