[gcode_macro PID_CALIBRATE_BED]
description: Bed Pid Calibrate
gcode:
  PID_CALIBRATE HEATER=heater_bed TARGET={params.BED_TEMP|default(65)}


[gcode_macro PID_CALIBRATE_HOTEND]
description: Hotend Pid Calibrate
gcode:
  PID_CALIBRATE HEATER=extruder TARGET={params.HOTEND_TEMP|default(230)}


# https://ellis3dp.com/Print-Tuning-Guide/articles/useful_macros/replace_m109_m190_with_temp_wait.html
[gcode_macro M109]
rename_existing: M99109
gcode:
    {% set s = params.S|float %}
    M104 S{s}

    {% if s != 0 %}
        {% if printer["gcode_macro _SAF_HEATING_NOZZLE_START"] != null %}
            _SAF_HEATING_NOZZLE_START
        {% endif %}

        {% set current_temp = printer.extruder.temperature %}
        {% if current_temp < s or current_temp > s+1 %}
          RESPOND TYPE=command MSG='Waiting for nozzle temp to reach {s}c'
        {% endif %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}

        {% if printer["gcode_macro _SAF_HEATING_NOZZLE_END"] != null %}
            _SAF_HEATING_NOZZLE_END
        {% endif %}
    {% endif %}


[gcode_macro M190]
rename_existing: M99190
gcode:
    {% set s = params.S|float %}
    M140 S{s}

    {% if s != 0 %}
        {% if printer["gcode_macro _SAF_HEATING_BED_START"] != null %}
            _SAF_HEATING_BED_START
        {% endif %}

        {% set current_temp = printer.heater_bed.temperature %}
        {% if current_temp < s or current_temp > s+1 %}
          RESPOND TYPE=command MSG='Waiting for bed temp to reach {s}c'
        {% endif %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}  ; Wait for bed temp (within 1 degree)

        {% if printer["gcode_macro _SAF_HEATING_BED_END"] != null %}
            _SAF_HEATING_BED_END
        {% endif %}
    {% endif %}


# https://discord.com/channels/1154500511777693819/1172473583604346899
# https://github.com/Guilouz/Creality-Helper-Script/blob/main/files/macros/useful-macros.cfg
[gcode_macro WARMUP]
description: Stress Test
variable_maxd: 14142.14 ; = SQRT(2*maxy)
gcode:
  {% set min_loops = 2 %}
  {% set max_loops = params.LOOPS|default(3)|int %}
  {% if 'LOOPS' in params|upper %}
    {% if max_loops < min_loops %}
      {% set max_loops = min_loops %}
    {% endif %}
  {% endif %}
  {% set loop_cnt = max_loops %}
  {% set maxx = params.X_ACCEL_MAX|default(10000)|int %}
  {% set maxy = params.Y_ACCEL_MAX|default(10000)|int %}
  {% set max_x = (printer.toolhead.axis_maximum.x|int-5) %}
  {% set max_y = (printer.toolhead.axis_maximum.y|int-5) %}
  {% set loop_step_y = max_y//(loop_cnt-1) %}
  {% set loop_step_x = max_x//(loop_cnt-1) %}
  {% set y_park = printer.toolhead.axis_maximum.y/2 %}
  {% set x_park = printer.toolhead.axis_maximum.x|float - 10.0 %}
  {% if printer.toolhead.homed_axes != "xyz" %}
    G28
  {% endif %}
  SET_VELOCITY_LIMIT ACCEL={maxx} ACCEL_TO_DECEL={maxx/2}
  {% for number in range(10,max_y+11,loop_step_y) %}
    {% if number >= max_y %}
      {% set number = max_y %}
    {% endif %}
    G1 F{maxy} X10 Y{number}
    G1 F{maxx} X{max_x} Y{number}
  {% endfor %}
  SET_VELOCITY_LIMIT ACCEL={maxy} ACCEL_TO_DECEL={maxy/2}
  {% for number in range(10,max_x+11,loop_step_y) %}
    {% if number >= max_x %}
      {% set number = max_x %}
    {% endif %}
    G1 F{maxy} X{number} Y{max_y}
    G1 F{maxy} X{number} Y10
  {% endfor %}
  SET_VELOCITY_LIMIT ACCEL={maxd} ACCEL_TO_DECEL={maxd/2}
  {% for times in range(loop_cnt) %}
    G1 F{maxx} X10 Y10
    G1 F{maxd} X{max_x} Y{max_y}
    G1 F{maxx} X10 Y{max_y}
    G1 F{maxd} X{max_x} Y10
    G1 F{maxy} X{max_x} Y{max_y}
    G1 F{maxd} X10 Y10
    G1 F{maxy} X10 Y{max_y}
    G1 F{maxd} X{max_x} Y10
  {% endfor %}
  SET_VELOCITY_LIMIT ACCEL={maxx} ACCEL_TO_DECEL={maxx/2}
  {% for times in range(loop_cnt) %}
    G1 F{maxy} X10 Y10
    G1 F{maxy} X10 Y{max_y}
    G1 F{maxx} X{max_x} Y{max_y}
    G1 F{maxy} X{max_x} Y10
    G1 F{maxx} X10 Y10
    G1 F{maxx} X{max_x} Y10
    G1 F{maxy} X{max_x} Y{max_y}
    G1 F{maxx} X10 Y{max_y}
  {% endfor %}
  G1 X{x_park} Y{y_park} F30000


# a convenience macro so it shows up in fluidd and mainsail as a button
[gcode_macro INPUT_SHAPER]
description: Run shaper calibrate and choose default shapers
gcode:
    SHAPER_CALIBRATE


# these macros are based on those from helper script but heavily modified to integrate
# with the fluidd / mainsail client macros
[gcode_macro _UNLOAD_FILAMENT]
gcode:
  M109 S{printer['gcode_macro RESUME'].last_extruder_temp.temp|int}
  RESPOND TYPE=command MSG="Unloading filament..."
  M83
  G1 E10 F300
  G1 E-15 F3000
  G1 E-22.4700 F2400
  G1 E-6.4200 F1200
  G1 E-3.2100 F720
  G1 E5.0000 F356
  G1 E-5.0000 F384
  G1 E5.0000 F412
  G1 E-5.0000 F440
  G1 E5.0000 F467
  G1 E-5.0000 F495
  G1 E5.0000 F523
  G1 E-5.0000 F3000
  G1 E-15 F3000
  M400
  # turn off extruder to help it avoid overheating
  SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
  BEEP
  BEEP


[gcode_macro _UNLOAD_MORE]
gcode:
  M109 S{printer['gcode_macro RESUME'].last_extruder_temp.temp|int}
  RESPOND TYPE=command MSG="Unloading filament..."
  M83
  G1 E-10 F180
  M400
  # turn off extruder to help it avoid overheating
  SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
  BEEP


[gcode_macro _LOAD_FILAMENT]
gcode:
  M109 S{printer['gcode_macro RESUME'].last_extruder_temp.temp|int}
  RESPOND TYPE=command MSG="Loading filament..."
  M83
  G1 E100 F180
  M400
  # turn off extruder to help it avoid overheating
  SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
  BEEP


[gcode_macro _PURGE_MORE]
gcode:
  M109 S{printer['gcode_macro RESUME'].last_extruder_temp.temp|int}
  RESPOND TYPE=command MSG="Purging filament..."
  M83
  G1 E10 F180
  M400
  # turn off extruder to help it avoid overheating
  SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
  BEEP


[gcode_macro _FC_RESUME]
gcode:
  RESPOND TYPE=command MSG="action:prompt_end"
  RESUME


[gcode_macro _FC_CANCEL]
gcode:
  RESPOND TYPE=command MSG="action:prompt_end"
  CANCEL_PRINT


[gcode_macro M600]
description: Filament Change
gcode:
  RESPOND TYPE=command MSG="Print paused for filament change!"
  PAUSE RESTORE=0
  _UNLOAD_FILAMENT
  M106 P0 S0
  M106 P2 S0
  RESPOND TYPE=command MSG="action:prompt_begin Filament change detected!"
  RESPOND TYPE=command MSG="action:prompt_text A necessary filament change has been detected. Please replace filament, LOAD it and click RESUME button."
  RESPOND TYPE=command MSG="action:prompt_button UNLOAD FILAMENT|_UNLOAD_FILAMENT|secondary"
  RESPOND TYPE=command MSG="action:prompt_button UNLOAD MORE FILAMENT|_UNLOAD_MORE|secondary"
  RESPOND TYPE=command MSG="action:prompt_button LOAD FILAMENT|_LOAD_FILAMENT|secondary"
  RESPOND TYPE=command MSG="action:prompt_button PURGE MORE FILAMENT|_PURGE_MORE|secondary"
  RESPOND TYPE=command MSG="action:prompt_footer_button CANCEL PRINT|_FC_CANCEL|error"
  RESPOND TYPE=command MSG="action:prompt_footer_button IGNORE|RESPOND TYPE=command MSG=action:prompt_end|warning"
  RESPOND TYPE=command MSG="action:prompt_footer_button RESUME|_FC_RESUME|primary"
  RESPOND TYPE=command MSG="action:prompt_show"


[gcode_macro _GUPPYSCREEN_EXTRUDE]
gcode:
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|int %}
  {% set EXTRUDE_LEN = params.EXTRUDE_LEN|int %}
  {% set SPEED = params.SPEED|int %}
  {% set target_nozzle_temp = printer[printer.toolhead.extruder].target %}
  {% if target_nozzle_temp < EXTRUDER_TEMP %}
    M109 S{EXTRUDER_TEMP}
  {% endif %}
  M83
  G1 E{EXTRUDE_LEN} F{SPEED}
  M400
  # turn off extruder to help it avoid overheating
  SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
  BEEP
  {% if target_nozzle_temp != EXTRUDER_TEMP %}
    M109 S{target_nozzle_temp}
  {% endif %}


[gcode_macro _GUPPYSCREEN_RETRACT]
gcode:
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|int %}
  {% set EXTRUDE_LEN = params.EXTRUDE_LEN|int %}
  {% set SPEED = params.SPEED|int %}
  {% set target_nozzle_temp = printer[printer.toolhead.extruder].target %}
  {% if target_nozzle_temp < EXTRUDER_TEMP %}
    M109 S{EXTRUDER_TEMP}
  {% endif %}
  M83
  G1 E-{EXTRUDE_LEN} F{SPEED}
  M400
  # turn off extruder to help it avoid overheating
  SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
  BEEP
  {% if target_nozzle_temp != EXTRUDER_TEMP %}
    M109 S{target_nozzle_temp}
  {% endif %}


[gcode_macro _GUPPYSCREEN_LOAD]
gcode:
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|int %}
  {% set target_nozzle_temp = printer[printer.toolhead.extruder].target %}
  {% if target_nozzle_temp < EXTRUDER_TEMP %}
    M109 S{EXTRUDER_TEMP}
  {% endif %}
  M83
  G1 E50 F180
  G1 E40 F180
  M400
  # turn off extruder to help it avoid overheating
  SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
  BEEP
  {% if target_nozzle_temp != EXTRUDER_TEMP %}
    M109 S{target_nozzle_temp}
  {% endif %}


[gcode_macro _GUPPYSCREEN_UNLOAD]
gcode:
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|int %}

  {% set target_nozzle_temp = printer[printer.toolhead.extruder].target %}
  {% if target_nozzle_temp < EXTRUDER_TEMP %}
    M109 S{EXTRUDER_TEMP}
  {% endif %}
  M83
  G1 E-50 F180
  G1 E-40 F2000
  M400
  # turn off extruder to help it avoid overheating
  SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
  BEEP

  {% if target_nozzle_temp != EXTRUDER_TEMP %}
    M109 S{target_nozzle_temp}
  {% endif %}


[gcode_macro EXCITATE_AXIS_AT_FREQUENCY]
description: Maintain a specified excitation frequency for a period of time to diagnose and locate a source of vibration
gcode:
  {% set frequency = params.FREQUENCY|default(25)|int %}
  {% set time = params.TIME|default(10)|int %}
  {% set axis = params.AXIS|default("x")|string|lower %}

  {% if axis not in ["x", "y", "a", "b"] %}
      { action_raise_error("AXIS selection invalid. Should be either x, y, a or b!") }
  {% endif %}

  {% if axis == "a" %}
      {% set axis = "1,-1" %}
  {% elif axis == "b" %}
      {% set axis = "1,1" %}
  {% endif %}

  TEST_RESONANCES OUTPUT=raw_data AXIS={axis} FREQ_START={frequency-1} FREQ_END={frequency+1} HZ_PER_SEC={1/(time/3)}
  M400
