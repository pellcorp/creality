[gcode_macro _START_END_PARAMS]
# this value is multiplied by the target temp to give wait time in seconds
variable_bed_warp_wait_multiplier: 8.0
# how far below target temp can the bed be to do fractional wait times
variable_bed_warp_fraction_wait: 0.75
# how long to wait each loop before displaying a status message
variable_bed_warp_wait_interval: 15
# max velocity for start print and bed mesh calibrate
variable_start_max_velocity: 400
# max accel for start print and bed mesh calibrate
variable_start_max_accel: 10000
# max square corner velocity for bed mesh calibrate
variable_start_max_square_corner_velocity: 5.0
# where not using cartotouch what to heat nozzle to just before oozing
variable_start_preheat_nozzle_temp: 150
# whether to do cooldown routine in END_PRINT
variable_end_print_cool_down: True
variable_end_print_cool_down_nozzle_temp: 70.0
# if target bed temp is above this the cool down is skipped
variable_end_print_cool_down_max_bed_temp: 70.0
# if bed warp stabilisation is enabled should we keep the bed heated
variable_end_print_keep_bed_heated: True
# position to move the nozzle to while heating the bed (including heak soaking)
# set this to 0 to disable this behaviour
variable_start_print_bed_heating_move_bed_distance: 20.0
# a setting to disable any bed meshing or even loading of an existing bed mesh
variable_activate_bed_mesh: True
gcode:

[gcode_macro _CLIENT_VARIABLE]
# Do not change these
variable_park_at_cancel: True
variable_use_custom_pos: True
# the value in mm to lift the nozzle when move to park position
variable_custom_park_dz: 45.0
# park position during CANCEL_PRINT and END_PRINT
variable_park_at_cancel_x: 0.0
# park position during CANCEL_PRINT and END_PRINT
variable_park_at_cancel_y: 0.0
# the value to retract during CANCEL_PRINT or END_PRINT
variable_cancel_retract: 7.0
# park position during PAUSE / M600 / FILAMENT RUNOUT
variable_custom_park_x: 0.0
# park position during PAUSE / M600 / FILAMENT RUNOUT
variable_custom_park_y: 0.0
# the value to retract during PAUSE / M600 / FILAMENT RUNOUT
variable_retract: 1.0
# retract speed in mm/s
variable_speed_retract: 35.0
# the value to unretract while RESUME
variable_unretract: 1.0
# unretract speed in mm/s
variable_speed_unretract: 35.0
# z move speed in mm/s
variable_speed_hop: 15.0
# move speed in mm/s
variable_speed_move: 100.0
# do not change this, this handles cancel print
variable_user_cancel_macro: "_ON_CANCEL"
# do not change this, this handles resume custom hook
variable_user_resume_macro: "_ON_RESUME"
# do not change this, this handles pause custom code
variable_user_pause_macro: "_ON_PAUSE"
# if this variable is not empty filament must be loaded to start or resume a print
variable_runout_sensor: ""
gcode:

[gcode_macro _KAMP_Settings]
description: This macro contains all adjustable settings for Line Purge and Smart Park
# Z position of nozzle during purge
variable_purge_height: 0.5
# Distance between tip of filament and nozzle before purge, should be at least the same as variable_cancel_retract
variable_tip_distance: 7.0
# Distance the purge will be in front of the print area, default is 10.
variable_purge_margin: 15
# Amount of filament to be purged prior to printing.
variable_purge_amount: 48
# Flow rate of purge in mm3/s. Default is 12.
variable_flow_rate: 12
# Z position for Smart Park, default is 10.
variable_smart_park_height: 10
gcode:

[virtual_pins]

[output_pin Bed_Warp_Stabilisation]
pin: virtual_pin:BED_WARP_STABILISE_pin
value: 1

[idle_timeout]
timeout: 3600
gcode:
    {% if printer.pause_resume.is_paused %}
        RESPOND TYPE=command MSG='Printer is paused, timeout bypassed'
    {% else %}
        RESPOND TYPE=command MSG='Timeout Reached - Turning off heaters and motors'

        TURN_OFF_HEATERS
        BED_MESH_CLEAR
        M84
    {% endif %}


[gcode_macro _ON_RESUME]
gcode:
    {% if printer["gcode_macro _SAF_ON_RESUME"] != null %}
        _SAF_ON_RESUME
    {% endif %}


[gcode_macro _ON_CANCEL]
gcode:
    # if there is an outstanding end print going on, we need to cancel it
    UPDATE_DELAYED_GCODE ID=wait_for_end_print_cooldown DURATION=0

    {% set max_velocity = printer.toolhead.max_velocity %}
    {% set max_accel = printer.toolhead.max_accel %}
    {% set start_max_velocity = printer["gcode_macro START_PRINT"].max_velocity %}
    {% set start_max_accel = printer["gcode_macro START_PRINT"].max_accel %}
    {% if start_max_velocity > 0 and start_max_velocity > 0 and (max_velocity != start_max_velocity or max_accel != start_max_accel) %}
      RESPOND TYPE=command MSG='Restoring VELOCITY={start_max_velocity} (was {max_velocity}) ACCEL={start_max_accel} (was {max_accel})'
      SET_VELOCITY_LIMIT VELOCITY={start_max_velocity} ACCEL={start_max_accel}
    {% endif %}

    {% if printer["gcode_macro _SAF_ON_CANCEL"] != null %}
        _SAF_ON_CANCEL
    {% endif %}

    TURN_OFF_HEATERS
    TURN_OFF_FANS
    BED_MESH_CLEAR
    M84


[gcode_macro _ON_PAUSE]
gcode:
    {% if printer["gcode_macro _SAF_ON_PAUSE"] != null %}
        _SAF_ON_PAUSE
    {% endif %}


[gcode_macro _ON_FILAMENT_RUNOUT]
gcode:
    {% if printer.print_stats.state == "printing" %}
        PAUSE

        {% if printer["gcode_macro _SAF_ON_FILAMENT_RUNOUT"] != null %}
            _SAF_ON_FILAMENT_RUNOUT
        {% else %}
            RESPOND TYPE=command MSG='Filament Runout detected.'
        {% endif %}
    {% else %}
        RESPOND TYPE=command MSG='Printer already paused.'
    {% endif %}


[gcode_macro START_PRINT]
variable_max_velocity: 0
variable_max_accel: 0
gcode:
    # if there is an outstanding end print going on, we need to cancel it
    UPDATE_DELAYED_GCODE ID=wait_for_end_print_cooldown DURATION=0

    {% set runout_sensor = printer["gcode_macro _CLIENT_VARIABLE"].runout_sensor|default("") %}
    {% if runout_sensor != "" %}
      {% set runout_sensor_id = (runout_sensor.split(" "))[1] %}
      SET_FILAMENT_SENSOR SENSOR={runout_sensor_id} ENABLE=1
      {% set filament_detected = printer[runout_sensor].filament_detected %}
    {% else %}
      {% set filament_detected = true %}
    {% endif %}

    # if a cooldown session was still in progress we want to forcefully end it
    {% set started_cooldown = printer["gcode_macro END_PRINT"].started_cooldown|default(false) %}

    {% set BED_TEMP=params.BED_TEMP|default(65)|float %}
    {% set EXTRUDER_TEMP=params.EXTRUDER_TEMP|default(230)|float %}
    {% set CARTOGRAPHER_MODEL=params.CARTOGRAPHER_MODEL|default(None) %}
    {% set BED_MESH_PROFILE=params.BED_MESH_PROFILE|default(None) %}
    {% set beacon = ('beacon' in printer.configfile.settings) %}
    {% set eddyng = ('probe_eddy_ng btt_eddy' in printer.configfile.settings) %}
    {% set klicky = (printer["gcode_macro _KLICKY_VARIABLES"] != null) %}
    {% set cartotouch = ('scanner' in printer.configfile.settings and 'touch' == printer.configfile.settings['scanner'].mode|default('touch')) %}
    {% set bed_warp_stabilisation = printer['output_pin Bed_Warp_Stabilisation'].value == 1 %}
    {% set current_bed_temp = printer.heater_bed.temperature %}

    {% set activate_bed_mesh = printer["gcode_macro _START_END_PARAMS"].activate_bed_mesh %}
    {% set start_print_bed_heating_move_bed_distance = printer["gcode_macro _START_END_PARAMS"].start_print_bed_heating_move_bed_distance %}
    {% set max_velocity = printer.toolhead.max_velocity %}
    {% set max_accel = printer.toolhead.max_accel %}
    {% set start_max_velocity = [printer["gcode_macro _START_END_PARAMS"].start_max_velocity, max_velocity]|min %}
    {% set start_max_accel = [printer["gcode_macro _START_END_PARAMS"].start_max_accel, max_accel]|min %}
    {% if cartotouch %}
        {% set preheat_nozzle_temp = printer.configfile.settings['scanner'].scanner_touch_max_temp %}
    {% else %}
        {% set preheat_nozzle_temp = printer["gcode_macro _START_END_PARAMS"].start_preheat_nozzle_temp %}
    {% endif %}

    {% if started_cooldown %}
      SET_GCODE_VARIABLE MACRO=END_PRINT VARIABLE=started_cooldown VALUE=False
      {% if "xyz" in printer.toolhead.homed_axes %}
        M84
      {% endif %}
      TURN_OFF_FANS
    {% endif %}

    # we want to complete the cooldown routine before checking
    {% if not filament_detected %}
      RESPOND TYPE=error MSG='Filament not detected, Print aborted! "{runout_sensor_id}" detects no filament, please load filament.'
      RESPOND TYPE=command MSG="action:prompt_begin Print aborted !!!"
      RESPOND TYPE=command MSG='action:prompt_text "{runout_sensor_id}" detects no filament, please load filament.'
      RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
      RESPOND TYPE=command MSG="action:prompt_show"
      CANCEL_PRINT
    {% else %}
      # save the current max velocity and max accel so we can restore them in END and CANCEL print
      SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=max_velocity VALUE={max_velocity}
      SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=max_accel VALUE={max_accel}

      {% if printer["gcode_macro _SAF_START_PRINT_START"] != null %}
          _SAF_START_PRINT_START
      {% endif %}

      {% if CARTOGRAPHER_MODEL %}
          CARTOGRAPHER_MODEL_SELECT name="{CARTOGRAPHER_MODEL}"
      {% endif %}

      M104 S{preheat_nozzle_temp}  # start heating nozzle but only to just before oozing

      M140 S{BED_TEMP}  # start heating bed dont wait

      {% if max_velocity > start_max_velocity or max_accel > start_max_accel %}
        RESPOND TYPE=command MSG='Setting VELOCITY={start_max_velocity} (was {max_velocity}) ACCEL={start_max_accel} (was {max_accel})'
        SET_VELOCITY_LIMIT VELOCITY={start_max_velocity} ACCEL={start_max_accel}
      {% endif %}

      # if we ran M84 because of cooldown we can't rely on checking printer.toolhead.homed_axes cos
      # for whatever stupid reason that object is not updated by klipper for M84 when executing during start print
      {% if started_cooldown or "xyz" not in printer.toolhead.homed_axes %}
          G28
      {% endif %}

      {% if start_print_bed_heating_move_bed_distance > 0 %}
        G0 Z{start_print_bed_heating_move_bed_distance} F1200
      {% endif %}

      {% if printer["gcode_macro _SAF_START_PRINT_AFTER_G28"] != null %}
          _SAF_START_PRINT_AFTER_G28
      {% endif %}

      M190 S{BED_TEMP}  # wait for bed temperature before next step

      {% if bed_warp_stabilisation %}
         {% if current_bed_temp < (BED_TEMP * 0.99) %}
              _WARP_STABILISE TARGET_TEMP={BED_TEMP} CURRENT_TEMP={current_bed_temp}
          {% else %}
              RESPOND TYPE=command MSG='Skipping bed warp stabilisation as bed already at {current_bed_temp}c'
          {% endif %}
      {% else %}
          RESPOND TYPE=command MSG='Skipping bed warp stabilisation - it is disabled'
      {% endif %}

      {% if printer["gcode_macro _SAF_START_PRINT_BEFORE_BED_MESH"] != null %}
          _SAF_START_PRINT_BEFORE_BED_MESH
      {% endif %}

      BED_MESH_CLEAR  # clear current mesh
      G4 P500  # wait required to prevent MCU overload / inconsistent meshing

      {% if beacon or cartotouch or eddyng %}
          M109 S{preheat_nozzle_temp}
      {% endif %}

      {% if beacon or eddyng %}
        {% if printer["gcode_macro _SAF_NOZZLE_WIPE"] != null %}
              _SAF_NOZZLE_WIPE
          {% endif %}
      {% endif %}

      {% if beacon %}
          # touch samples and retries are configured in beacon.cfg
          G28 Z METHOD=CONTACT CALIBRATE=0
      {% elif eddyng %}
          # touch samples and retries are configured in eddyng.cfg
          PROBE_EDDY_NG_TAP HOME_Z=1
      {% endif %}

      {% if activate_bed_mesh %}
        {% if BED_MESH_PROFILE %}
            BED_MESH_PROFILE LOAD="{BED_MESH_PROFILE}"
        {% else %}
            BED_MESH_CALIBRATE ADAPTIVE=1 ADAPTIVE_MARGIN=5
        {% endif %}

        {% if printer["gcode_macro _SAF_START_PRINT_AFTER_BED_MESH"] != null %}
            _SAF_START_PRINT_AFTER_BED_MESH
        {% endif %}
      {% endif %}

      # the carto team strongly recommends tap after bed mesh
      {% if cartotouch %}
          {% if printer["gcode_macro _SAF_NOZZLE_WIPE"] != null %}
              _SAF_NOZZLE_WIPE
          {% endif %}

          # touch samples and retries are configured in cartotouch.cfg
          CARTOGRAPHER_TOUCH DEBUG=0

          # I think this macro alters accel settings so set them back
          SET_VELOCITY_LIMIT VELOCITY={start_max_velocity} ACCEL={start_max_accel}
      {% endif %}

      SMART_PARK  # park the printhead near the print area

      M109 S{EXTRUDER_TEMP}  # wait for nozzle temperature before next step

      {% if printer["gcode_macro _SAF_START_PRINT_BEFORE_LINE_PURGE"] != null %}
          _SAF_START_PRINT_BEFORE_LINE_PURGE
      {% endif %}

      LINE_PURGE

      {% if max_velocity > start_max_velocity or max_accel > start_max_accel %}
        RESPOND TYPE=command MSG='Restoring VELOCITY={max_velocity} ACCEL={max_accel}'
        SET_VELOCITY_LIMIT VELOCITY={max_velocity} ACCEL={max_accel}
      {% endif %}

      {% if printer["gcode_macro _SAF_START_PRINT_END"] != null %}
          _SAF_START_PRINT_END
      {% endif %}
    {% endif %}

# This is mostly copied from _TOOLHEAD_PARK_PAUSE_CANCEL so that the speeds and
# behaviour are consistent for CANCEL_PRINT and END_PRINT
[gcode_macro _TOOLHEAD_PARK_END_PRINT]
gcode:
    {% set cooldown = params.COOLDOWN | default(None) %}
    {% set skip_z_park = params.SKIP_Z_PARK | default(None) %}

    {% if "xyz" in printer.toolhead.homed_axes %}
        {% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
        {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
        {% set sp_move = client.speed_move | default(velocity) * 60 %}
        {% set park_at_cancel_x = client.park_at_cancel_x %}

        G90
        {% if not skip_z_park %}
            {% set sp_hop = client.speed_hop | default(15) * 60 %}
            {% set park_dz = client.custom_park_dz | default(2.0) | abs %}
            {% set origin = printer.gcode_move.homing_origin %}
            {% set act = printer.gcode_move.gcode_position %}
            {% set max = printer.toolhead.axis_maximum %}
            {% set z_park = [[(act.z + park_dz), 0]|max, (max.z - origin.z)] | min %}

            G1 Z{z_park} F{sp_hop}
        {% endif %}
        {% if cooldown %}
            {% set park_at_cancel_y = printer.configfile.settings['stepper_y'].position_max / 2 %}
        {% else %}
            {% set park_at_cancel_y = client.park_at_cancel_y %}
        {% endif %}
        G0 X{park_at_cancel_x} Y{park_at_cancel_y} F{sp_move}
        # set back to relative coordinates
        {% if not printer.gcode_move.absolute_coordinates %}
            G91
        {% endif %}
    {% else %}
        RESPOND TYPE=error MSG='Printer not homed'
    {% endif %}


[gcode_macro END_PRINT]
variable_started_cooldown: False
gcode:
    {% set park_at_cancel_x = printer['gcode_macro _CLIENT_VARIABLE'].park_at_cancel_x %}
    {% set park_at_cancel_y = printer['gcode_macro _CLIENT_VARIABLE'].park_at_cancel_y %}
    {% set bed_warp_stabilisation = printer['output_pin Bed_Warp_Stabilisation'].value == 1 %}
    {% set end_print_cool_down = printer["gcode_macro _START_END_PARAMS"].end_print_cool_down %}
    {% set end_print_cool_down_nozzle_temp = printer["gcode_macro _START_END_PARAMS"].end_print_cool_down_nozzle_temp|float %}
    {% set end_print_cool_down_max_bed_temp = printer["gcode_macro _START_END_PARAMS"].end_print_cool_down_max_bed_temp|float %}
    {% set end_print_keep_bed_heated = printer["gcode_macro _START_END_PARAMS"].end_print_keep_bed_heated %}
    {% set eddyng = ('probe_eddy_ng btt_eddy' in printer.configfile.settings) %}
    {% set runout_sensor = printer["gcode_macro _CLIENT_VARIABLE"].runout_sensor|default("") %}

    # reset this flag just to make sure
    SET_GCODE_VARIABLE MACRO=END_PRINT VARIABLE=started_cooldown VALUE=False

    {% set max_velocity = printer.toolhead.max_velocity %}
    {% set max_accel = printer.toolhead.max_accel %}
    {% set start_max_velocity = printer["gcode_macro START_PRINT"].max_velocity %}
    {% set start_max_accel = printer["gcode_macro START_PRINT"].max_accel %}
    {% if max_velocity != start_max_velocity or max_accel != start_max_accel %}
      RESPOND TYPE=command MSG='Restoring VELOCITY={start_max_velocity} (was {max_velocity}) ACCEL={start_max_accel} (was {max_accel})'
      SET_VELOCITY_LIMIT VELOCITY={start_max_velocity} ACCEL={start_max_accel}
    {% endif %}

    BED_MESH_CLEAR
    {% if eddyng %}
      PROBE_EDDY_NG_SET_TAP_OFFSET VALUE=0
    {% endif %}

    {% set current_bed_temp = printer.heater_bed.temperature %}

    {% if printer["gcode_macro _SAF_END_PRINT_START"] != null %}
        _SAF_END_PRINT_START
    {% endif %}

    {% if runout_sensor != "" %}
      {% set runout_sensor_id = (runout_sensor.split(" "))[1] %}
      SET_FILAMENT_SENSOR SENSOR={runout_sensor_id} ENABLE=0
    {% endif %}

    {% set cancel_retract = printer['gcode_macro _CLIENT_VARIABLE'].cancel_retract %}
    _CLIENT_RETRACT LENGTH={cancel_retract}

    # park in front of aux fan if cooldown
    {% if end_print_cool_down and current_bed_temp < end_print_cool_down_max_bed_temp %}
        _TOOLHEAD_PARK_END_PRINT COOLDOWN=1
    {% else %}
        _TOOLHEAD_PARK_END_PRINT
    {% endif %}

    {% if bed_warp_stabilisation and end_print_keep_bed_heated %}
        RESPOND TYPE=command MSG='Heatbed waiting for next print'
        M104 S0  # Turning off the nozzle
    {% else %}
        TURN_OFF_HEATERS
    {% endif %}

    # clear pause_next_layer and pause_at_layer as preparation for next print
    SET_PAUSE_NEXT_LAYER ENABLE=0
    SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0

    {% if end_print_cool_down and current_bed_temp < end_print_cool_down_max_bed_temp %}
        RESPOND TYPE=command MSG='Waiting for nozzle temp to be below {end_print_cool_down_nozzle_temp}c'
        {% if 'fan_generic chamber' in printer.configfile.settings %}
          SET_FAN_SPEED FAN=chamber SPEED=0.6
        {% endif %}
        {% if 'fan_generic auxiliary' in printer.configfile.settings %}
          SET_FAN_SPEED FAN=auxiliary SPEED=0.5
        {% endif %}
        SET_FAN_SPEED FAN=part SPEED=0.7

        # flag that we have started the cooldown procedure
        SET_GCODE_VARIABLE MACRO=END_PRINT VARIABLE=started_cooldown VALUE=True
        UPDATE_DELAYED_GCODE ID=wait_for_end_print_cooldown DURATION=1
    {% else %}
        M84
        TURN_OFF_FANS

        {% if printer["gcode_macro _SAF_END_PRINT_END"] != null %}
            _SAF_END_PRINT_END
        {% endif %}
    {% endif %}


[delayed_gcode wait_for_end_print_cooldown]
gcode:
  {% set end_print_cool_down_nozzle_temp = printer["gcode_macro _START_END_PARAMS"].end_print_cool_down_nozzle_temp|float %}
  {% if printer.extruder.temperature <= end_print_cool_down_nozzle_temp %}
      _WAIT_TEMP_COOL_DOWN_END
  {% else %}
      UPDATE_DELAYED_GCODE ID=wait_for_end_print_cooldown DURATION=5
  {% endif %}


# this is defined separately to exit the delayed gcode directly
[gcode_macro _WAIT_TEMP_COOL_DOWN_END]
gcode:
  UPDATE_DELAYED_GCODE ID=wait_for_end_print_cooldown DURATION=0

  # we already lowered the bed earlier so want to skip it now
  _TOOLHEAD_PARK_END_PRINT SKIP_Z_PARK=1

  M84
  TURN_OFF_FANS

  SET_GCODE_VARIABLE MACRO=END_PRINT VARIABLE=started_cooldown VALUE=False

  {% if printer["gcode_macro _SAF_END_PRINT_END"] != null %}
      _SAF_END_PRINT_END
  {% endif %}


# Thanks to Zero for this macro
[gcode_macro _WARP_STABILISE]
description: "Performs bed warp stabilisation based on the current bed temperature. Adjusts stabilisation time according to the bed temperature."
gcode:
    {% set multiplier = printer["gcode_macro _START_END_PARAMS"].bed_warp_wait_multiplier|float %}
    {% set interval = printer["gcode_macro _START_END_PARAMS"].bed_warp_wait_interval|int %}
    {% set partial = printer["gcode_macro _START_END_PARAMS"].bed_warp_fraction_wait|float %}

    {% set current_temp = params.CURRENT_TEMP|float %}
    {% set target_temp = params.TARGET_TEMP|float %}

    # if current temp is already pretty high, we only need to do a fraction of heat soaking
    {% if current_temp > (target_temp * partial) %}
        {% set total_time = ((target_temp - current_temp) * multiplier)|int %}
    {% else %}
        # 100c will be 13minutes approx heat time, 65c will be 8.5 minutes preheat, etc.
        {% set total_time = (target_temp * multiplier)|int %}
    {% endif %}

    RESPOND TYPE=command MSG='Bed Warp Stabilisation starting with a total time of {total_time} seconds...'
    
    {% set loops = (total_time / interval)|int %}   
    {% for i in range(loops) %}
        {% set time_remaining = total_time - (i + 1) * interval %}
        RESPOND TYPE=command MSG='Bed Warp Stabilization { time_remaining } seconds remaining'
        {% if time_remaining < interval %}
            G4 P{ time_remaining * 1000 }  # Wait for the interval time in milliseconds
        {% else %}
            G4 P{ interval * 1000 }  # Wait for the interval time in milliseconds
        {% endif %}
    {% endfor %}

    RESPOND TYPE=command MSG='Warp Stabilisation complete!'
