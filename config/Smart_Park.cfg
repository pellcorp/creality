# based on https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging/blob/main/Configuration/Smart_Park.cfg
# modified to park over the start of the Line_Purge position always
[gcode_macro SMART_PARK]
description: Parks your printhead over the start of line purge
gcode:
    # Get relevant printer params
    {% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}

    # Get purge settings from _Kamp_Settings
    {% set z_height = printer["gcode_macro _KAMP_Settings"].smart_park_height | float %}
    {% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
    {% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}

    # Calculate purge origins and centers from objects
    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}    # Get all object points
    {% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}                          # Object x min
    {% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}                          # Object x max
    {% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}                          # Object y min
    {% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}                          # Object y max

    {% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}      # Create center point of purge line relative to print on X axis
    {% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}      # Create center point of purge line relative to print on Y axis

    {% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}                                  # Add margin to x min, compare to 0, and choose the larger
    {% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}                                  # Add margin to y min, compare to 0, and choose the larger

    {% if purge_y_origin > 0 %}
      { action_respond_info("Smart Park location: {},{}.".format(
            (purge_x_center),
            (purge_y_origin),
        )) }
    {% else %}
        { action_respond_info("Smart Park location: {},{}.".format(
            (purge_x_origin),
            (purge_y_center),
        )) }
    {% endif %}

    SAVE_GCODE_STATE NAME=Prepurge_State                                                    # Create gcode state

    {% if purge_y_origin > 0 %}                                                             # If there's room on Y, will purge along X axis in front of print area
        G92 E0                                                                              # Reset extruder
        G0 F{travel_speed}                                                                  # Set travel speed
        G90                                                                                 # Absolute positioning
        G0 X{purge_x_center} Y{purge_y_origin}                                              # Move to purge position
        G0 Z{z_height}                                                                  # Move to purge Z height
    {% else %}                                                                              # If there's room on X, will purge along Y axis to the left of print area
        G92 E0                                                                              # Reset extruder
        G0 F{travel_speed}                                                                  # Set travel speed
        G90                                                                                 # Absolute positioning
        G0 X{purge_x_origin} Y{purge_y_center}                                              # Move to purge position
        G0 Z{z_height}                                                                  # Move to purge Z height
    {% endif %}

    RESTORE_GCODE_STATE NAME=Prepurge_State                                                 # Restore gcode state
